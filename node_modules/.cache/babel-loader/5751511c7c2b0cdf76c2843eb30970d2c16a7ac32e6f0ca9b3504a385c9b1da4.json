{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srk\\\\Downloads\\\\arq_phantom_clone\\\\src\\\\components\\\\Carousel3D.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst media = [{\n  url: 'https://picsum.photos/800/600?random=1'\n}, {\n  url: 'https://picsum.photos/800/600?random=2'\n}, {\n  url: 'https://picsum.photos/800/600?random=3'\n}, {\n  url: 'https://picsum.photos/800/600?random=4'\n}, {\n  url: 'https://picsum.photos/800/600?random=5'\n}, {\n  url: 'https://picsum.photos/800/600?random=6'\n}, {\n  url: 'https://picsum.photos/800/600?random=7'\n}, {\n  url: 'https://picsum.photos/800/600?random=8'\n}, {\n  url: 'https://picsum.photos/800/600?random=9'\n}, {\n  url: 'https://picsum.photos/800/600?random=10'\n}, {\n  url: 'https://picsum.photos/800/600?random=11'\n}, {\n  url: 'https://picsum.photos/800/600?random=12'\n}];\nconst Carousel3D = () => {\n  _s();\n  const mountRef = useRef();\n  const sceneRef = useRef();\n  const rendererRef = useRef();\n  const cameraRef = useRef();\n  const meshesRef = useRef([]);\n  const [hoveredIndex, setHoveredIndex] = useState(null);\n  useEffect(() => {\n    const width = mountRef.current.clientWidth;\n    const height = mountRef.current.clientHeight;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x0a0a0a);\n    scene.fog = new THREE.FogExp2(0x0a0a0a, 0.008);\n    sceneRef.current = scene;\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.set(0, 0, 25);\n    cameraRef.current = camera;\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      powerPreference: \"high-performance\"\n    });\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1.1;\n    mountRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.4);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 10, 5);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 2048;\n    directionalLight.shadow.mapSize.height = 2048;\n    scene.add(directionalLight);\n    const pointLight1 = new THREE.PointLight(0x4080ff, 0.3, 100);\n    pointLight1.position.set(-15, 8, 12);\n    scene.add(pointLight1);\n    const pointLight2 = new THREE.PointLight(0xff8040, 0.2, 80);\n    pointLight2.position.set(15, -5, 8);\n    scene.add(pointLight2);\n\n    // Create meshes\n    const meshes = [];\n    const loader = new THREE.TextureLoader();\n    media.forEach((item, i) => {\n      const geometry = new THREE.PlaneGeometry(4.5, 3.2);\n      loader.load(item.url, texture => {\n        texture.colorSpace = THREE.SRGBColorSpace;\n        texture.generateMipmaps = false;\n        texture.minFilter = THREE.LinearFilter;\n        texture.magFilter = THREE.LinearFilter;\n        const material = new THREE.MeshPhysicalMaterial({\n          map: texture,\n          roughness: 0.05,\n          metalness: 0.1,\n          transparent: true,\n          opacity: 0.95,\n          side: THREE.DoubleSide,\n          emissive: 0x050505,\n          clearcoat: 0.4,\n          clearcoatRoughness: 0.05\n        });\n        const mesh = new THREE.Mesh(geometry, material);\n\n        // More scattered, gallery-like positioning\n        const radius = 20;\n        const rows = 3;\n        const cols = 4;\n        const row = Math.floor(i / cols);\n        const col = i % cols;\n\n        // Create irregular grid with randomization\n        const baseAngle = col / cols * Math.PI * 2;\n        const radiusVar = radius + (Math.random() - 0.5) * 8;\n        const angleVar = baseAngle + (Math.random() - 0.5) * 0.8;\n        const x = Math.sin(angleVar) * radiusVar + (Math.random() - 0.5) * 4;\n        const y = (row - 1) * 6 + (Math.random() - 0.5) * 4;\n        const z = Math.cos(angleVar) * radiusVar + (Math.random() - 0.5) * 4;\n        mesh.position.set(x, y, z);\n\n        // Random orientations for natural gallery feel\n        mesh.rotation.x = (Math.random() - 0.5) * 0.4;\n        mesh.rotation.y = angleVar + (Math.random() - 0.5) * 0.6;\n        mesh.rotation.z = (Math.random() - 0.5) * 0.2;\n        mesh.userData = {\n          originalPosition: mesh.position.clone(),\n          originalRotation: mesh.rotation.clone(),\n          index: i\n        };\n        mesh.castShadow = true;\n        mesh.receiveShadow = true;\n        scene.add(mesh);\n        meshes.push(mesh);\n      });\n    });\n    meshesRef.current = meshes;\n\n    // Mouse interaction\n    let isMouseDown = false;\n    let mouseX = 0;\n    let mouseY = 0;\n    let targetRotationX = 0;\n    let targetRotationY = 0;\n    let currentRotationX = 0;\n    let currentRotationY = 0;\n    let autoRotate = true;\n    let autoRotateSpeed = 0.001;\n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n    const handleMouseDown = event => {\n      isMouseDown = true;\n      autoRotate = false;\n      mouseX = event.clientX;\n      mouseY = event.clientY;\n    };\n    const handleMouseMove = event => {\n      mouse.x = event.clientX / width * 2 - 1;\n      mouse.y = -(event.clientY / height) * 2 + 1;\n      if (isMouseDown) {\n        const deltaX = event.clientX - mouseX;\n        const deltaY = event.clientY - mouseY;\n        targetRotationY += deltaX * 0.006;\n        targetRotationX += deltaY * 0.006;\n        targetRotationX = Math.max(-Math.PI / 2.5, Math.min(Math.PI / 2.5, targetRotationX));\n        mouseX = event.clientX;\n        mouseY = event.clientY;\n      }\n\n      // Raycast for hover effects\n      raycaster.setFromCamera(mouse, camera);\n      const intersects = raycaster.intersectObjects(meshes);\n      if (intersects.length > 0) {\n        const hoveredMesh = intersects[0].object;\n        setHoveredIndex(hoveredMesh.userData.index);\n      } else {\n        setHoveredIndex(null);\n      }\n    };\n    const handleMouseUp = () => {\n      isMouseDown = false;\n      setTimeout(() => {\n        autoRotate = true;\n      }, 4000);\n    };\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      if (autoRotate) {\n        targetRotationY += autoRotateSpeed;\n      }\n\n      // Smooth rotation\n      currentRotationX += (targetRotationX - currentRotationX) * 0.04;\n      currentRotationY += (targetRotationY - currentRotationY) * 0.04;\n\n      // Update mesh positions and effects\n      meshes.forEach((mesh, index) => {\n        if (mesh.userData) {\n          // Apply global rotation\n          const pos = mesh.userData.originalPosition.clone();\n          pos.applyAxisAngle(new THREE.Vector3(0, 1, 0), currentRotationY);\n          pos.applyAxisAngle(new THREE.Vector3(1, 0, 0), currentRotationX);\n          mesh.position.copy(pos);\n\n          // Hover effects\n          if (hoveredIndex === index) {\n            mesh.scale.lerp(new THREE.Vector3(1.15, 1.15, 1.15), 0.08);\n            mesh.material.emissive.setHex(0x101010);\n          } else {\n            mesh.scale.lerp(new THREE.Vector3(1, 1, 1), 0.08);\n            mesh.material.emissive.setHex(0x050505);\n          }\n\n          // Subtle floating animation\n          const time = Date.now() * 0.0008;\n          const floatOffset = Math.sin(time + index * 0.7) * 0.02;\n          mesh.position.y += floatOffset;\n\n          // Gentle rotation variation\n          const rotationOffset = Math.sin(time + index * 0.3) * 0.008;\n          mesh.rotation.z = mesh.userData.originalRotation.z + rotationOffset;\n        }\n      });\n\n      // Subtle camera movement\n      const time = Date.now() * 0.0003;\n      camera.position.x += Math.sin(time) * 0.015;\n      camera.position.y += Math.cos(time * 0.8) * 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Event listeners\n    renderer.domElement.addEventListener('mousedown', handleMouseDown);\n    renderer.domElement.addEventListener('mousemove', handleMouseMove);\n    renderer.domElement.addEventListener('mouseup', handleMouseUp);\n\n    // Resize handler\n    const handleResize = () => {\n      const width = mountRef.current.clientWidth;\n      const height = mountRef.current.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      renderer.domElement.removeEventListener('mousedown', handleMouseDown);\n      renderer.domElement.removeEventListener('mousemove', handleMouseMove);\n      renderer.domElement.removeEventListener('mouseup', handleMouseUp);\n      window.removeEventListener('resize', handleResize);\n      meshes.forEach(mesh => {\n        scene.remove(mesh);\n        if (mesh.geometry) mesh.geometry.dispose();\n        if (mesh.material) {\n          if (mesh.material.map) mesh.material.map.dispose();\n          mesh.material.dispose();\n        }\n      });\n      renderer.dispose();\n    };\n  }, [hoveredIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-screen bg-black overflow-hidden\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      className: \"w-full h-full cursor-grab active:cursor-grabbing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_s(Carousel3D, \"XXOGmUEtbpjZ/aZdPA63QxqH2ew=\");\n_c = Carousel3D;\nexport default Carousel3D;\nvar _c;\n$RefreshReg$(_c, \"Carousel3D\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","jsxDEV","_jsxDEV","media","url","Carousel3D","_s","mountRef","sceneRef","rendererRef","cameraRef","meshesRef","hoveredIndex","setHoveredIndex","width","current","clientWidth","height","clientHeight","scene","Scene","background","Color","fog","FogExp2","camera","PerspectiveCamera","position","set","renderer","WebGLRenderer","antialias","alpha","powerPreference","setSize","setPixelRatio","Math","min","window","devicePixelRatio","shadowMap","enabled","type","PCFSoftShadowMap","toneMapping","ACESFilmicToneMapping","toneMappingExposure","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","castShadow","shadow","mapSize","pointLight1","PointLight","pointLight2","meshes","loader","TextureLoader","forEach","item","i","geometry","PlaneGeometry","load","texture","colorSpace","SRGBColorSpace","generateMipmaps","minFilter","LinearFilter","magFilter","material","MeshPhysicalMaterial","map","roughness","metalness","transparent","opacity","side","DoubleSide","emissive","clearcoat","clearcoatRoughness","mesh","Mesh","radius","rows","cols","row","floor","col","baseAngle","PI","radiusVar","random","angleVar","x","sin","y","z","cos","rotation","userData","originalPosition","clone","originalRotation","index","receiveShadow","push","isMouseDown","mouseX","mouseY","targetRotationX","targetRotationY","currentRotationX","currentRotationY","autoRotate","autoRotateSpeed","raycaster","Raycaster","mouse","Vector2","handleMouseDown","event","clientX","clientY","handleMouseMove","deltaX","deltaY","max","setFromCamera","intersects","intersectObjects","length","hoveredMesh","object","handleMouseUp","setTimeout","animate","requestAnimationFrame","pos","applyAxisAngle","Vector3","copy","scale","lerp","setHex","time","Date","now","floatOffset","rotationOffset","render","addEventListener","handleResize","aspect","updateProjectionMatrix","removeEventListener","remove","dispose","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/srk/Downloads/arq_phantom_clone/src/components/Carousel3D.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst media = [\r\n  { url: 'https://picsum.photos/800/600?random=1' },\r\n  { url: 'https://picsum.photos/800/600?random=2' },\r\n  { url: 'https://picsum.photos/800/600?random=3' },\r\n  { url: 'https://picsum.photos/800/600?random=4' },\r\n  { url: 'https://picsum.photos/800/600?random=5' },\r\n  { url: 'https://picsum.photos/800/600?random=6' },\r\n  { url: 'https://picsum.photos/800/600?random=7' },\r\n  { url: 'https://picsum.photos/800/600?random=8' },\r\n  { url: 'https://picsum.photos/800/600?random=9' },\r\n  { url: 'https://picsum.photos/800/600?random=10' },\r\n  { url: 'https://picsum.photos/800/600?random=11' },\r\n  { url: 'https://picsum.photos/800/600?random=12' }\r\n];\r\n\r\nconst Carousel3D = () => {\r\n  const mountRef = useRef();\r\n  const sceneRef = useRef();\r\n  const rendererRef = useRef();\r\n  const cameraRef = useRef();\r\n  const meshesRef = useRef([]);\r\n  const [hoveredIndex, setHoveredIndex] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const width = mountRef.current.clientWidth;\r\n    const height = mountRef.current.clientHeight;\r\n\r\n    // Scene setup\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x0a0a0a);\r\n    scene.fog = new THREE.FogExp2(0x0a0a0a, 0.008);\r\n    sceneRef.current = scene;\r\n\r\n    // Camera\r\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n    camera.position.set(0, 0, 25);\r\n    cameraRef.current = camera;\r\n\r\n    // Renderer\r\n    const renderer = new THREE.WebGLRenderer({ \r\n      antialias: true, \r\n      alpha: true,\r\n      powerPreference: \"high-performance\"\r\n    });\r\n    renderer.setSize(width, height);\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.toneMappingExposure = 1.1;\r\n    mountRef.current.appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n\r\n    // Lighting\r\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.4);\r\n    scene.add(ambientLight);\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(10, 10, 5);\r\n    directionalLight.castShadow = true;\r\n    directionalLight.shadow.mapSize.width = 2048;\r\n    directionalLight.shadow.mapSize.height = 2048;\r\n    scene.add(directionalLight);\r\n\r\n    const pointLight1 = new THREE.PointLight(0x4080ff, 0.3, 100);\r\n    pointLight1.position.set(-15, 8, 12);\r\n    scene.add(pointLight1);\r\n\r\n    const pointLight2 = new THREE.PointLight(0xff8040, 0.2, 80);\r\n    pointLight2.position.set(15, -5, 8);\r\n    scene.add(pointLight2);\r\n\r\n    // Create meshes\r\n    const meshes = [];\r\n    const loader = new THREE.TextureLoader();\r\n    \r\n    media.forEach((item, i) => {\r\n      const geometry = new THREE.PlaneGeometry(4.5, 3.2);\r\n      \r\n      loader.load(item.url, (texture) => {\r\n        texture.colorSpace = THREE.SRGBColorSpace;\r\n        texture.generateMipmaps = false;\r\n        texture.minFilter = THREE.LinearFilter;\r\n        texture.magFilter = THREE.LinearFilter;\r\n        \r\n        const material = new THREE.MeshPhysicalMaterial({\r\n          map: texture,\r\n          roughness: 0.05,\r\n          metalness: 0.1,\r\n          transparent: true,\r\n          opacity: 0.95,\r\n          side: THREE.DoubleSide,\r\n          emissive: 0x050505,\r\n          clearcoat: 0.4,\r\n          clearcoatRoughness: 0.05\r\n        });\r\n\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        \r\n        // More scattered, gallery-like positioning\r\n        const radius = 20;\r\n        const rows = 3;\r\n        const cols = 4;\r\n        const row = Math.floor(i / cols);\r\n        const col = i % cols;\r\n        \r\n        // Create irregular grid with randomization\r\n        const baseAngle = (col / cols) * Math.PI * 2;\r\n        const radiusVar = radius + (Math.random() - 0.5) * 8;\r\n        const angleVar = baseAngle + (Math.random() - 0.5) * 0.8;\r\n        \r\n        const x = Math.sin(angleVar) * radiusVar + (Math.random() - 0.5) * 4;\r\n        const y = (row - 1) * 6 + (Math.random() - 0.5) * 4;\r\n        const z = Math.cos(angleVar) * radiusVar + (Math.random() - 0.5) * 4;\r\n        \r\n        mesh.position.set(x, y, z);\r\n        \r\n        // Random orientations for natural gallery feel\r\n        mesh.rotation.x = (Math.random() - 0.5) * 0.4;\r\n        mesh.rotation.y = angleVar + (Math.random() - 0.5) * 0.6;\r\n        mesh.rotation.z = (Math.random() - 0.5) * 0.2;\r\n        \r\n        mesh.userData = {\r\n          originalPosition: mesh.position.clone(),\r\n          originalRotation: mesh.rotation.clone(),\r\n          index: i\r\n        };\r\n\r\n        mesh.castShadow = true;\r\n        mesh.receiveShadow = true;\r\n        \r\n        scene.add(mesh);\r\n        meshes.push(mesh);\r\n      });\r\n    });\r\n\r\n    meshesRef.current = meshes;\r\n\r\n    // Mouse interaction\r\n    let isMouseDown = false;\r\n    let mouseX = 0;\r\n    let mouseY = 0;\r\n    let targetRotationX = 0;\r\n    let targetRotationY = 0;\r\n    let currentRotationX = 0;\r\n    let currentRotationY = 0;\r\n    let autoRotate = true;\r\n    let autoRotateSpeed = 0.001;\r\n\r\n    const raycaster = new THREE.Raycaster();\r\n    const mouse = new THREE.Vector2();\r\n\r\n    const handleMouseDown = (event) => {\r\n      isMouseDown = true;\r\n      autoRotate = false;\r\n      mouseX = event.clientX;\r\n      mouseY = event.clientY;\r\n    };\r\n\r\n    const handleMouseMove = (event) => {\r\n      mouse.x = (event.clientX / width) * 2 - 1;\r\n      mouse.y = -(event.clientY / height) * 2 + 1;\r\n\r\n      if (isMouseDown) {\r\n        const deltaX = event.clientX - mouseX;\r\n        const deltaY = event.clientY - mouseY;\r\n        \r\n        targetRotationY += deltaX * 0.006;\r\n        targetRotationX += deltaY * 0.006;\r\n        targetRotationX = Math.max(-Math.PI / 2.5, Math.min(Math.PI / 2.5, targetRotationX));\r\n        \r\n        mouseX = event.clientX;\r\n        mouseY = event.clientY;\r\n      }\r\n\r\n      // Raycast for hover effects\r\n      raycaster.setFromCamera(mouse, camera);\r\n      const intersects = raycaster.intersectObjects(meshes);\r\n      \r\n      if (intersects.length > 0) {\r\n        const hoveredMesh = intersects[0].object;\r\n        setHoveredIndex(hoveredMesh.userData.index);\r\n      } else {\r\n        setHoveredIndex(null);\r\n      }\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n      isMouseDown = false;\r\n      setTimeout(() => {\r\n        autoRotate = true;\r\n      }, 4000);\r\n    };\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n\r\n      if (autoRotate) {\r\n        targetRotationY += autoRotateSpeed;\r\n      }\r\n\r\n      // Smooth rotation\r\n      currentRotationX += (targetRotationX - currentRotationX) * 0.04;\r\n      currentRotationY += (targetRotationY - currentRotationY) * 0.04;\r\n\r\n      // Update mesh positions and effects\r\n      meshes.forEach((mesh, index) => {\r\n        if (mesh.userData) {\r\n          // Apply global rotation\r\n          const pos = mesh.userData.originalPosition.clone();\r\n          pos.applyAxisAngle(new THREE.Vector3(0, 1, 0), currentRotationY);\r\n          pos.applyAxisAngle(new THREE.Vector3(1, 0, 0), currentRotationX);\r\n          mesh.position.copy(pos);\r\n\r\n          // Hover effects\r\n          if (hoveredIndex === index) {\r\n            mesh.scale.lerp(new THREE.Vector3(1.15, 1.15, 1.15), 0.08);\r\n            mesh.material.emissive.setHex(0x101010);\r\n          } else {\r\n            mesh.scale.lerp(new THREE.Vector3(1, 1, 1), 0.08);\r\n            mesh.material.emissive.setHex(0x050505);\r\n          }\r\n\r\n          // Subtle floating animation\r\n          const time = Date.now() * 0.0008;\r\n          const floatOffset = Math.sin(time + index * 0.7) * 0.02;\r\n          mesh.position.y += floatOffset;\r\n          \r\n          // Gentle rotation variation\r\n          const rotationOffset = Math.sin(time + index * 0.3) * 0.008;\r\n          mesh.rotation.z = mesh.userData.originalRotation.z + rotationOffset;\r\n        }\r\n      });\r\n\r\n      // Subtle camera movement\r\n      const time = Date.now() * 0.0003;\r\n      camera.position.x += Math.sin(time) * 0.015;\r\n      camera.position.y += Math.cos(time * 0.8) * 0.01;\r\n\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    animate();\r\n\r\n    // Event listeners\r\n    renderer.domElement.addEventListener('mousedown', handleMouseDown);\r\n    renderer.domElement.addEventListener('mousemove', handleMouseMove);\r\n    renderer.domElement.addEventListener('mouseup', handleMouseUp);\r\n\r\n    // Resize handler\r\n    const handleResize = () => {\r\n      const width = mountRef.current.clientWidth;\r\n      const height = mountRef.current.clientHeight;\r\n      \r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(width, height);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      renderer.domElement.removeEventListener('mousedown', handleMouseDown);\r\n      renderer.domElement.removeEventListener('mousemove', handleMouseMove);\r\n      renderer.domElement.removeEventListener('mouseup', handleMouseUp);\r\n      window.removeEventListener('resize', handleResize);\r\n      \r\n      meshes.forEach(mesh => {\r\n        scene.remove(mesh);\r\n        if (mesh.geometry) mesh.geometry.dispose();\r\n        if (mesh.material) {\r\n          if (mesh.material.map) mesh.material.map.dispose();\r\n          mesh.material.dispose();\r\n        }\r\n      });\r\n      \r\n      renderer.dispose();\r\n    };\r\n  }, [hoveredIndex]);\r\n\r\n  return (\r\n    <div className=\"w-full h-screen bg-black overflow-hidden\">\r\n      <div\r\n        ref={mountRef}\r\n        className=\"w-full h-full cursor-grab active:cursor-grabbing\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Carousel3D;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}