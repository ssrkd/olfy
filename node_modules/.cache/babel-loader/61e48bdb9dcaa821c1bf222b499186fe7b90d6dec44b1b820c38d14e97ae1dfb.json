{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector2, Color, WebGLRenderTarget, HalfFloatType, UniformsUtils, ShaderMaterial, Vector3, AdditiveBlending, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\nconst UnrealBloomPass = /* @__PURE__ */(() => {\n  const _UnrealBloomPass = class extends Pass {\n    constructor(resolution, strength, radius, threshold) {\n      super();\n      this.strength = strength !== void 0 ? strength : 1;\n      this.radius = radius;\n      this.threshold = threshold;\n      this.resolution = resolution !== void 0 ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n      this.clearColor = new Color(0, 0, 0);\n      this.renderTargetsHorizontal = [];\n      this.renderTargetsVertical = [];\n      this.nMips = 5;\n      let resx = Math.round(this.resolution.x / 2);\n      let resy = Math.round(this.resolution.y / 2);\n      this.renderTargetBright = new WebGLRenderTarget(resx, resy, {\n        type: HalfFloatType\n      });\n      this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n      this.renderTargetBright.texture.generateMipmaps = false;\n      for (let i = 0; i < this.nMips; i++) {\n        const renderTargetHorizonal = new WebGLRenderTarget(resx, resy, {\n          type: HalfFloatType\n        });\n        renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n        renderTargetHorizonal.texture.generateMipmaps = false;\n        this.renderTargetsHorizontal.push(renderTargetHorizonal);\n        const renderTargetVertical = new WebGLRenderTarget(resx, resy, {\n          type: HalfFloatType\n        });\n        renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n        renderTargetVertical.texture.generateMipmaps = false;\n        this.renderTargetsVertical.push(renderTargetVertical);\n        resx = Math.round(resx / 2);\n        resy = Math.round(resy / 2);\n      }\n      const highPassShader = LuminosityHighPassShader;\n      this.highPassUniforms = UniformsUtils.clone(highPassShader.uniforms);\n      this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n      this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n      this.materialHighPassFilter = new ShaderMaterial({\n        uniforms: this.highPassUniforms,\n        vertexShader: highPassShader.vertexShader,\n        fragmentShader: highPassShader.fragmentShader,\n        defines: {}\n      });\n      this.separableBlurMaterials = [];\n      const kernelSizeArray = [3, 5, 7, 9, 11];\n      resx = Math.round(this.resolution.x / 2);\n      resy = Math.round(this.resolution.y / 2);\n      for (let i = 0; i < this.nMips; i++) {\n        this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n        this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n        resx = Math.round(resx / 2);\n        resy = Math.round(resy / 2);\n      }\n      this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n      this.compositeMaterial.uniforms[\"blurTexture1\"].value = this.renderTargetsVertical[0].texture;\n      this.compositeMaterial.uniforms[\"blurTexture2\"].value = this.renderTargetsVertical[1].texture;\n      this.compositeMaterial.uniforms[\"blurTexture3\"].value = this.renderTargetsVertical[2].texture;\n      this.compositeMaterial.uniforms[\"blurTexture4\"].value = this.renderTargetsVertical[3].texture;\n      this.compositeMaterial.uniforms[\"blurTexture5\"].value = this.renderTargetsVertical[4].texture;\n      this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n      this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n      this.compositeMaterial.needsUpdate = true;\n      const bloomFactors = [1, 0.8, 0.6, 0.4, 0.2];\n      this.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n      this.bloomTintColors = [new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1)];\n      this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n      const copyShader = CopyShader;\n      this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n      this.copyUniforms[\"opacity\"].value = 1;\n      this.materialCopy = new ShaderMaterial({\n        uniforms: this.copyUniforms,\n        vertexShader: copyShader.vertexShader,\n        fragmentShader: copyShader.fragmentShader,\n        blending: AdditiveBlending,\n        depthTest: false,\n        depthWrite: false,\n        transparent: true\n      });\n      this.enabled = true;\n      this.needsSwap = false;\n      this._oldClearColor = new Color();\n      this.oldClearAlpha = 1;\n      this.basic = new MeshBasicMaterial();\n      this.fsQuad = new FullScreenQuad(null);\n    }\n    dispose() {\n      for (let i = 0; i < this.renderTargetsHorizontal.length; i++) {\n        this.renderTargetsHorizontal[i].dispose();\n      }\n      for (let i = 0; i < this.renderTargetsVertical.length; i++) {\n        this.renderTargetsVertical[i].dispose();\n      }\n      this.renderTargetBright.dispose();\n      for (let i = 0; i < this.separableBlurMaterials.length; i++) {\n        this.separableBlurMaterials[i].dispose();\n      }\n      this.compositeMaterial.dispose();\n      this.materialCopy.dispose();\n      this.basic.dispose();\n      this.fsQuad.dispose();\n    }\n    setSize(width, height) {\n      let resx = Math.round(width / 2);\n      let resy = Math.round(height / 2);\n      this.renderTargetBright.setSize(resx, resy);\n      for (let i = 0; i < this.nMips; i++) {\n        this.renderTargetsHorizontal[i].setSize(resx, resy);\n        this.renderTargetsVertical[i].setSize(resx, resy);\n        this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n        resx = Math.round(resx / 2);\n        resy = Math.round(resy / 2);\n      }\n    }\n    render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      const oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.setClearColor(this.clearColor, 0);\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      if (this.renderToScreen) {\n        this.fsQuad.material = this.basic;\n        this.basic.map = readBuffer.texture;\n        renderer.setRenderTarget(null);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n      }\n      this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n      this.fsQuad.material = this.materialHighPassFilter;\n      renderer.setRenderTarget(this.renderTargetBright);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      let inputRenderTarget = this.renderTargetBright;\n      for (let i = 0; i < this.nMips; i++) {\n        this.fsQuad.material = this.separableBlurMaterials[i];\n        this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n        this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionX;\n        renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n        this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionY;\n        renderer.setRenderTarget(this.renderTargetsVertical[i]);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        inputRenderTarget = this.renderTargetsVertical[i];\n      }\n      this.fsQuad.material = this.compositeMaterial;\n      this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n      this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n      this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n      renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(readBuffer);\n        this.fsQuad.render(renderer);\n      }\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n    getSeperableBlurMaterial(kernelRadius) {\n      return new ShaderMaterial({\n        defines: {\n          KERNEL_RADIUS: kernelRadius,\n          SIGMA: kernelRadius\n        },\n        uniforms: {\n          colorTexture: {\n            value: null\n          },\n          texSize: {\n            value: new Vector2(0.5, 0.5)\n          },\n          direction: {\n            value: new Vector2(0.5, 0.5)\n          }\n        },\n        vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n        fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n      });\n    }\n    getCompositeMaterial(nMips) {\n      return new ShaderMaterial({\n        defines: {\n          NUM_MIPS: nMips\n        },\n        uniforms: {\n          blurTexture1: {\n            value: null\n          },\n          blurTexture2: {\n            value: null\n          },\n          blurTexture3: {\n            value: null\n          },\n          blurTexture4: {\n            value: null\n          },\n          blurTexture5: {\n            value: null\n          },\n          bloomStrength: {\n            value: 1\n          },\n          bloomFactors: {\n            value: null\n          },\n          bloomTintColors: {\n            value: null\n          },\n          bloomRadius: {\n            value: 0\n          }\n        },\n        vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n        fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n      });\n    }\n  };\n  let UnrealBloomPass2 = _UnrealBloomPass;\n  __publicField(UnrealBloomPass2, \"BlurDirectionX\", new Vector2(1, 0));\n  __publicField(UnrealBloomPass2, \"BlurDirectionY\", new Vector2(0, 1));\n  return UnrealBloomPass2;\n})();\nexport { UnrealBloomPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector2","Color","WebGLRenderTarget","HalfFloatType","UniformsUtils","ShaderMaterial","Vector3","AdditiveBlending","MeshBasicMaterial","Pass","FullScreenQuad","CopyShader","LuminosityHighPassShader","UnrealBloomPass","_UnrealBloomPass","constructor","resolution","strength","radius","threshold","x","y","clearColor","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","type","texture","name","generateMipmaps","i","renderTargetHorizonal","push","renderTargetVertical","highPassShader","highPassUniforms","clone","uniforms","materialHighPassFilter","vertexShader","fragmentShader","defines","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomFactors","bloomTintColors","copyShader","copyUniforms","materialCopy","blending","depthTest","depthWrite","transparent","enabled","needsSwap","_oldClearColor","oldClearAlpha","basic","fsQuad","dispose","length","setSize","width","height","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","state","buffers","stencil","setTest","renderToScreen","material","map","setRenderTarget","clear","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","bloomStrength","bloomRadius","UnrealBloomPass2"],"sources":["C:/Users/srk/Downloads/arq_phantom_clone/node_modules/three-stdlib/postprocessing/UnrealBloomPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector2, Color, WebGLRenderTarget, HalfFloatType, UniformsUtils, ShaderMaterial, Vector3, AdditiveBlending, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\nconst UnrealBloomPass = /* @__PURE__ */ (() => {\n  const _UnrealBloomPass = class extends Pass {\n    constructor(resolution, strength, radius, threshold) {\n      super();\n      this.strength = strength !== void 0 ? strength : 1;\n      this.radius = radius;\n      this.threshold = threshold;\n      this.resolution = resolution !== void 0 ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n      this.clearColor = new Color(0, 0, 0);\n      this.renderTargetsHorizontal = [];\n      this.renderTargetsVertical = [];\n      this.nMips = 5;\n      let resx = Math.round(this.resolution.x / 2);\n      let resy = Math.round(this.resolution.y / 2);\n      this.renderTargetBright = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n      this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n      this.renderTargetBright.texture.generateMipmaps = false;\n      for (let i = 0; i < this.nMips; i++) {\n        const renderTargetHorizonal = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n        renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n        renderTargetHorizonal.texture.generateMipmaps = false;\n        this.renderTargetsHorizontal.push(renderTargetHorizonal);\n        const renderTargetVertical = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n        renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n        renderTargetVertical.texture.generateMipmaps = false;\n        this.renderTargetsVertical.push(renderTargetVertical);\n        resx = Math.round(resx / 2);\n        resy = Math.round(resy / 2);\n      }\n      const highPassShader = LuminosityHighPassShader;\n      this.highPassUniforms = UniformsUtils.clone(highPassShader.uniforms);\n      this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n      this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n      this.materialHighPassFilter = new ShaderMaterial({\n        uniforms: this.highPassUniforms,\n        vertexShader: highPassShader.vertexShader,\n        fragmentShader: highPassShader.fragmentShader,\n        defines: {}\n      });\n      this.separableBlurMaterials = [];\n      const kernelSizeArray = [3, 5, 7, 9, 11];\n      resx = Math.round(this.resolution.x / 2);\n      resy = Math.round(this.resolution.y / 2);\n      for (let i = 0; i < this.nMips; i++) {\n        this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n        this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n        resx = Math.round(resx / 2);\n        resy = Math.round(resy / 2);\n      }\n      this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n      this.compositeMaterial.uniforms[\"blurTexture1\"].value = this.renderTargetsVertical[0].texture;\n      this.compositeMaterial.uniforms[\"blurTexture2\"].value = this.renderTargetsVertical[1].texture;\n      this.compositeMaterial.uniforms[\"blurTexture3\"].value = this.renderTargetsVertical[2].texture;\n      this.compositeMaterial.uniforms[\"blurTexture4\"].value = this.renderTargetsVertical[3].texture;\n      this.compositeMaterial.uniforms[\"blurTexture5\"].value = this.renderTargetsVertical[4].texture;\n      this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n      this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n      this.compositeMaterial.needsUpdate = true;\n      const bloomFactors = [1, 0.8, 0.6, 0.4, 0.2];\n      this.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n      this.bloomTintColors = [\n        new Vector3(1, 1, 1),\n        new Vector3(1, 1, 1),\n        new Vector3(1, 1, 1),\n        new Vector3(1, 1, 1),\n        new Vector3(1, 1, 1)\n      ];\n      this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n      const copyShader = CopyShader;\n      this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n      this.copyUniforms[\"opacity\"].value = 1;\n      this.materialCopy = new ShaderMaterial({\n        uniforms: this.copyUniforms,\n        vertexShader: copyShader.vertexShader,\n        fragmentShader: copyShader.fragmentShader,\n        blending: AdditiveBlending,\n        depthTest: false,\n        depthWrite: false,\n        transparent: true\n      });\n      this.enabled = true;\n      this.needsSwap = false;\n      this._oldClearColor = new Color();\n      this.oldClearAlpha = 1;\n      this.basic = new MeshBasicMaterial();\n      this.fsQuad = new FullScreenQuad(null);\n    }\n    dispose() {\n      for (let i = 0; i < this.renderTargetsHorizontal.length; i++) {\n        this.renderTargetsHorizontal[i].dispose();\n      }\n      for (let i = 0; i < this.renderTargetsVertical.length; i++) {\n        this.renderTargetsVertical[i].dispose();\n      }\n      this.renderTargetBright.dispose();\n      for (let i = 0; i < this.separableBlurMaterials.length; i++) {\n        this.separableBlurMaterials[i].dispose();\n      }\n      this.compositeMaterial.dispose();\n      this.materialCopy.dispose();\n      this.basic.dispose();\n      this.fsQuad.dispose();\n    }\n    setSize(width, height) {\n      let resx = Math.round(width / 2);\n      let resy = Math.round(height / 2);\n      this.renderTargetBright.setSize(resx, resy);\n      for (let i = 0; i < this.nMips; i++) {\n        this.renderTargetsHorizontal[i].setSize(resx, resy);\n        this.renderTargetsVertical[i].setSize(resx, resy);\n        this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n        resx = Math.round(resx / 2);\n        resy = Math.round(resy / 2);\n      }\n    }\n    render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      const oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.setClearColor(this.clearColor, 0);\n      if (maskActive)\n        renderer.state.buffers.stencil.setTest(false);\n      if (this.renderToScreen) {\n        this.fsQuad.material = this.basic;\n        this.basic.map = readBuffer.texture;\n        renderer.setRenderTarget(null);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n      }\n      this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n      this.fsQuad.material = this.materialHighPassFilter;\n      renderer.setRenderTarget(this.renderTargetBright);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      let inputRenderTarget = this.renderTargetBright;\n      for (let i = 0; i < this.nMips; i++) {\n        this.fsQuad.material = this.separableBlurMaterials[i];\n        this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n        this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionX;\n        renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n        this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionY;\n        renderer.setRenderTarget(this.renderTargetsVertical[i]);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        inputRenderTarget = this.renderTargetsVertical[i];\n      }\n      this.fsQuad.material = this.compositeMaterial;\n      this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n      this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n      this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n      renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n      if (maskActive)\n        renderer.state.buffers.stencil.setTest(true);\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(readBuffer);\n        this.fsQuad.render(renderer);\n      }\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n    getSeperableBlurMaterial(kernelRadius) {\n      return new ShaderMaterial({\n        defines: {\n          KERNEL_RADIUS: kernelRadius,\n          SIGMA: kernelRadius\n        },\n        uniforms: {\n          colorTexture: { value: null },\n          texSize: { value: new Vector2(0.5, 0.5) },\n          direction: { value: new Vector2(0.5, 0.5) }\n        },\n        vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n        fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n      });\n    }\n    getCompositeMaterial(nMips) {\n      return new ShaderMaterial({\n        defines: {\n          NUM_MIPS: nMips\n        },\n        uniforms: {\n          blurTexture1: { value: null },\n          blurTexture2: { value: null },\n          blurTexture3: { value: null },\n          blurTexture4: { value: null },\n          blurTexture5: { value: null },\n          bloomStrength: { value: 1 },\n          bloomFactors: { value: null },\n          bloomTintColors: { value: null },\n          bloomRadius: { value: 0 }\n        },\n        vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n        fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n      });\n    }\n  };\n  let UnrealBloomPass2 = _UnrealBloomPass;\n  __publicField(UnrealBloomPass2, \"BlurDirectionX\", new Vector2(1, 0));\n  __publicField(UnrealBloomPass2, \"BlurDirectionY\", new Vector2(0, 1));\n  return UnrealBloomPass2;\n})();\nexport {\n  UnrealBloomPass\n};\n//# sourceMappingURL=UnrealBloomPass.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}