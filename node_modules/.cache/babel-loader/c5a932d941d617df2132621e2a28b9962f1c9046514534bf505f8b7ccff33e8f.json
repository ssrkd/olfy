{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3 } from \"three\";\nconst isMesh = object => object.isMesh;\nclass STLExporter {\n  constructor() {\n    __publicField(this, \"binary\", false);\n    __publicField(this, \"output\", \"\");\n    __publicField(this, \"offset\", 80);\n    // skip header\n    __publicField(this, \"objects\", []);\n    __publicField(this, \"triangles\", 0);\n    __publicField(this, \"vA\", new Vector3());\n    __publicField(this, \"vB\", new Vector3());\n    __publicField(this, \"vC\", new Vector3());\n    __publicField(this, \"cb\", new Vector3());\n    __publicField(this, \"ab\", new Vector3());\n    __publicField(this, \"normal\", new Vector3());\n  }\n  parse(scene, options) {\n    this.binary = (options == null ? void 0 : options.binary) !== void 0 ? options == null ? void 0 : options.binary : false;\n    scene.traverse(object => {\n      if (isMesh(object)) {\n        const geometry = object.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.STLExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        const index = geometry.index;\n        const positionAttribute = geometry.getAttribute(\"position\") || null;\n        if (!positionAttribute) return;\n        this.triangles += index !== null ? index.count / 3 : positionAttribute.count / 3;\n        this.objects.push({\n          object3d: object,\n          geometry\n        });\n      }\n    });\n    if (this.binary) {\n      const bufferLength = this.triangles * 2 + this.triangles * 3 * 4 * 4 + 80 + 4;\n      const arrayBuffer = new ArrayBuffer(bufferLength);\n      this.output = new DataView(arrayBuffer);\n      this.output.setUint32(this.offset, this.triangles, true);\n      this.offset += 4;\n    } else {\n      this.output = \"\";\n      this.output += \"solid exported\\n\";\n    }\n    for (let i = 0, il = this.objects.length; i < il; i++) {\n      const object = this.objects[i].object3d;\n      const geometry = this.objects[i].geometry;\n      const index = geometry.index;\n      const positionAttribute = geometry.getAttribute(\"position\");\n      if (index !== null) {\n        for (let j = 0; j < index.count; j += 3) {\n          const a = index.getX(j + 0);\n          const b = index.getX(j + 1);\n          const c = index.getX(j + 2);\n          this.writeFace(a, b, c, positionAttribute, object);\n        }\n      } else {\n        for (let j = 0; j < positionAttribute.count; j += 3) {\n          const a = j + 0;\n          const b = j + 1;\n          const c = j + 2;\n          this.writeFace(a, b, c, positionAttribute, object);\n        }\n      }\n    }\n    if (!this.binary) {\n      this.output += \"endsolid exported\\n\";\n    }\n    return this.output;\n  }\n  writeFace(a, b, c, positionAttribute, object) {\n    this.vA.fromBufferAttribute(positionAttribute, a);\n    this.vB.fromBufferAttribute(positionAttribute, b);\n    this.vC.fromBufferAttribute(positionAttribute, c);\n    if (object.isSkinnedMesh) {\n      const mesh = object;\n      if (\"applyBoneTransform\" in mesh) {\n        mesh.applyBoneTransform(a, this.vA);\n        mesh.applyBoneTransform(b, this.vB);\n        mesh.applyBoneTransform(c, this.vC);\n      } else {\n        mesh.boneTransform(a, this.vA);\n        mesh.boneTransform(b, this.vB);\n        mesh.boneTransform(c, this.vC);\n      }\n    }\n    this.vA.applyMatrix4(object.matrixWorld);\n    this.vB.applyMatrix4(object.matrixWorld);\n    this.vC.applyMatrix4(object.matrixWorld);\n    this.writeNormal(this.vA, this.vB, this.vC);\n    this.writeVertex(this.vA);\n    this.writeVertex(this.vB);\n    this.writeVertex(this.vC);\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setUint16(this.offset, 0, true);\n      this.offset += 2;\n    } else {\n      this.output += \"\t\tendloop\\n\";\n      this.output += \"\tendfacet\\n\";\n    }\n  }\n  writeNormal(vA, vB, vC) {\n    this.cb.subVectors(vC, vB);\n    this.ab.subVectors(vA, vB);\n    this.cb.cross(this.ab).normalize();\n    this.normal.copy(this.cb).normalize();\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, this.normal.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\tfacet normal ${this.normal.x} ${this.normal.y} ${this.normal.z}\n`;\n      this.output += \"\t\touter loop\\n\";\n    }\n  }\n  writeVertex(vertex) {\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, vertex.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\t\t\tvertex ${vertex.x} ${vertex.y} ${vertex.z}\n`;\n    }\n  }\n}\nexport { STLExporter };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","isMesh","object","STLExporter","constructor","parse","scene","options","binary","traverse","geometry","isBufferGeometry","Error","index","positionAttribute","getAttribute","triangles","count","objects","push","object3d","bufferLength","arrayBuffer","ArrayBuffer","output","DataView","setUint32","offset","i","il","length","j","a","getX","b","c","writeFace","vA","fromBufferAttribute","vB","vC","isSkinnedMesh","mesh","applyBoneTransform","boneTransform","applyMatrix4","matrixWorld","writeNormal","writeVertex","setUint16","cb","subVectors","ab","cross","normalize","normal","copy","setFloat32","x","y","z","vertex"],"sources":["C:/Users/srk/Downloads/arq_phantom_clone/node_modules/three-stdlib/exporters/STLExporter.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3 } from \"three\";\nconst isMesh = (object) => object.isMesh;\nclass STLExporter {\n  constructor() {\n    __publicField(this, \"binary\", false);\n    __publicField(this, \"output\", \"\");\n    __publicField(this, \"offset\", 80);\n    // skip header\n    __publicField(this, \"objects\", []);\n    __publicField(this, \"triangles\", 0);\n    __publicField(this, \"vA\", new Vector3());\n    __publicField(this, \"vB\", new Vector3());\n    __publicField(this, \"vC\", new Vector3());\n    __publicField(this, \"cb\", new Vector3());\n    __publicField(this, \"ab\", new Vector3());\n    __publicField(this, \"normal\", new Vector3());\n  }\n  parse(scene, options) {\n    this.binary = (options == null ? void 0 : options.binary) !== void 0 ? options == null ? void 0 : options.binary : false;\n    scene.traverse((object) => {\n      if (isMesh(object)) {\n        const geometry = object.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.STLExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        const index = geometry.index;\n        const positionAttribute = geometry.getAttribute(\"position\") || null;\n        if (!positionAttribute)\n          return;\n        this.triangles += index !== null ? index.count / 3 : positionAttribute.count / 3;\n        this.objects.push({\n          object3d: object,\n          geometry\n        });\n      }\n    });\n    if (this.binary) {\n      const bufferLength = this.triangles * 2 + this.triangles * 3 * 4 * 4 + 80 + 4;\n      const arrayBuffer = new ArrayBuffer(bufferLength);\n      this.output = new DataView(arrayBuffer);\n      this.output.setUint32(this.offset, this.triangles, true);\n      this.offset += 4;\n    } else {\n      this.output = \"\";\n      this.output += \"solid exported\\n\";\n    }\n    for (let i = 0, il = this.objects.length; i < il; i++) {\n      const object = this.objects[i].object3d;\n      const geometry = this.objects[i].geometry;\n      const index = geometry.index;\n      const positionAttribute = geometry.getAttribute(\"position\");\n      if (index !== null) {\n        for (let j = 0; j < index.count; j += 3) {\n          const a = index.getX(j + 0);\n          const b = index.getX(j + 1);\n          const c = index.getX(j + 2);\n          this.writeFace(a, b, c, positionAttribute, object);\n        }\n      } else {\n        for (let j = 0; j < positionAttribute.count; j += 3) {\n          const a = j + 0;\n          const b = j + 1;\n          const c = j + 2;\n          this.writeFace(a, b, c, positionAttribute, object);\n        }\n      }\n    }\n    if (!this.binary) {\n      this.output += \"endsolid exported\\n\";\n    }\n    return this.output;\n  }\n  writeFace(a, b, c, positionAttribute, object) {\n    this.vA.fromBufferAttribute(positionAttribute, a);\n    this.vB.fromBufferAttribute(positionAttribute, b);\n    this.vC.fromBufferAttribute(positionAttribute, c);\n    if (object.isSkinnedMesh) {\n      const mesh = object;\n      if (\"applyBoneTransform\" in mesh) {\n        mesh.applyBoneTransform(a, this.vA);\n        mesh.applyBoneTransform(b, this.vB);\n        mesh.applyBoneTransform(c, this.vC);\n      } else {\n        mesh.boneTransform(a, this.vA);\n        mesh.boneTransform(b, this.vB);\n        mesh.boneTransform(c, this.vC);\n      }\n    }\n    this.vA.applyMatrix4(object.matrixWorld);\n    this.vB.applyMatrix4(object.matrixWorld);\n    this.vC.applyMatrix4(object.matrixWorld);\n    this.writeNormal(this.vA, this.vB, this.vC);\n    this.writeVertex(this.vA);\n    this.writeVertex(this.vB);\n    this.writeVertex(this.vC);\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setUint16(this.offset, 0, true);\n      this.offset += 2;\n    } else {\n      this.output += \"\t\tendloop\\n\";\n      this.output += \"\tendfacet\\n\";\n    }\n  }\n  writeNormal(vA, vB, vC) {\n    this.cb.subVectors(vC, vB);\n    this.ab.subVectors(vA, vB);\n    this.cb.cross(this.ab).normalize();\n    this.normal.copy(this.cb).normalize();\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, this.normal.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\tfacet normal ${this.normal.x} ${this.normal.y} ${this.normal.z}\n`;\n      this.output += \"\t\touter loop\\n\";\n    }\n  }\n  writeVertex(vertex) {\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, vertex.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\t\t\tvertex ${vertex.x} ${vertex.y} ${vertex.z}\n`;\n    }\n  }\n}\nexport {\n  STLExporter\n};\n//# sourceMappingURL=STLExporter.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}