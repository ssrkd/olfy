{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst SSAOPass = /* @__PURE__ */(() => {\n  const _SSAOPass = class extends Pass {\n    constructor(scene, camera, width, height) {\n      super();\n      this.width = width !== void 0 ? width : 512;\n      this.height = height !== void 0 ? height : 512;\n      this.clear = true;\n      this.camera = camera;\n      this.scene = scene;\n      this.kernelRadius = 8;\n      this.kernelSize = 32;\n      this.kernel = [];\n      this.noiseTexture = null;\n      this.output = 0;\n      this.minDistance = 5e-3;\n      this.maxDistance = 0.1;\n      this._visibilityCache = /* @__PURE__ */new Map();\n      this.generateSampleKernel();\n      this.generateRandomKernelRotations();\n      const depthTexture = new DepthTexture();\n      depthTexture.format = DepthStencilFormat;\n      depthTexture.type = UnsignedInt248Type;\n      this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height);\n      this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n        minFilter: NearestFilter,\n        magFilter: NearestFilter,\n        depthTexture\n      });\n      this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n      this.blurRenderTarget = this.ssaoRenderTarget.clone();\n      if (SSAOShader === void 0) {\n        console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n      }\n      this.ssaoMaterial = new ShaderMaterial({\n        defines: Object.assign({}, SSAOShader.defines),\n        uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n        vertexShader: SSAOShader.vertexShader,\n        fragmentShader: SSAOShader.fragmentShader,\n        blending: NoBlending\n      });\n      this.ssaoMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n      this.ssaoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n      this.ssaoMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n      this.ssaoMaterial.uniforms[\"tNoise\"].value = this.noiseTexture;\n      this.ssaoMaterial.uniforms[\"kernel\"].value = this.kernel;\n      this.ssaoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.ssaoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.ssaoMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n      this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.normalMaterial = new MeshNormalMaterial();\n      this.normalMaterial.blending = NoBlending;\n      this.blurMaterial = new ShaderMaterial({\n        defines: Object.assign({}, SSAOBlurShader.defines),\n        uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n        vertexShader: SSAOBlurShader.vertexShader,\n        fragmentShader: SSAOBlurShader.fragmentShader\n      });\n      this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n      this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n      this.depthRenderMaterial = new ShaderMaterial({\n        defines: Object.assign({}, SSAODepthShader.defines),\n        uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n        vertexShader: SSAODepthShader.vertexShader,\n        fragmentShader: SSAODepthShader.fragmentShader,\n        blending: NoBlending\n      });\n      this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n      this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.copyMaterial = new ShaderMaterial({\n        uniforms: UniformsUtils.clone(CopyShader.uniforms),\n        vertexShader: CopyShader.vertexShader,\n        fragmentShader: CopyShader.fragmentShader,\n        transparent: true,\n        depthTest: false,\n        depthWrite: false,\n        blendSrc: DstColorFactor,\n        blendDst: ZeroFactor,\n        blendEquation: AddEquation,\n        blendSrcAlpha: DstAlphaFactor,\n        blendDstAlpha: ZeroFactor,\n        blendEquationAlpha: AddEquation\n      });\n      this.fsQuad = new FullScreenQuad(null);\n      this.originalClearColor = new Color();\n    }\n    dispose() {\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.ssaoRenderTarget.dispose();\n      this.blurRenderTarget.dispose();\n      this.normalMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n    render(renderer, writeBuffer) {\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      this.overrideVisibility();\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n      this.restoreVisibility();\n      this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n      this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n      this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n      this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      switch (this.output) {\n        case _SSAOPass.OUTPUT.SSAO:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Blur:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Default:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = CustomBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        default:\n          console.warn(\"THREE.SSAOPass: Unknown output type.\");\n      }\n    }\n    renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      const originalClearAlpha = renderer.getClearAlpha();\n      const originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n    renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      const originalClearAlpha = renderer.getClearAlpha();\n      const originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n    setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.beautyRenderTarget.setSize(width, height);\n      this.ssaoRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    }\n    generateSampleKernel() {\n      const kernelSize = this.kernelSize;\n      const kernel = this.kernel;\n      for (let i = 0; i < kernelSize; i++) {\n        const sample = new Vector3();\n        sample.x = Math.random() * 2 - 1;\n        sample.y = Math.random() * 2 - 1;\n        sample.z = Math.random();\n        sample.normalize();\n        let scale = i / kernelSize;\n        scale = MathUtils.lerp(0.1, 1, scale * scale);\n        sample.multiplyScalar(scale);\n        kernel.push(sample);\n      }\n    }\n    generateRandomKernelRotations() {\n      const width = 4,\n        height = 4;\n      if (SimplexNoise === void 0) {\n        console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n      }\n      const simplex = new SimplexNoise();\n      const size = width * height;\n      const data = new Float32Array(size);\n      for (let i = 0; i < size; i++) {\n        const x = Math.random() * 2 - 1;\n        const y = Math.random() * 2 - 1;\n        const z = 0;\n        data[i] = simplex.noise3d(x, y, z);\n      }\n      this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n      this.noiseTexture.wrapS = RepeatWrapping;\n      this.noiseTexture.wrapT = RepeatWrapping;\n      this.noiseTexture.needsUpdate = true;\n    }\n    overrideVisibility() {\n      const scene = this.scene;\n      const cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        cache.set(object, object.visible);\n        if (object.isPoints || object.isLine) object.visible = false;\n      });\n    }\n    restoreVisibility() {\n      const scene = this.scene;\n      const cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        const visible = cache.get(object);\n        object.visible = visible;\n      });\n      cache.clear();\n    }\n  };\n  let SSAOPass2 = _SSAOPass;\n  __publicField(SSAOPass2, \"OUTPUT\", {\n    Default: 0,\n    SSAO: 1,\n    Blur: 2,\n    Beauty: 3,\n    Depth: 4,\n    Normal: 5\n  });\n  return SSAOPass2;\n})();\nexport { SSAOPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","DepthTexture","DepthStencilFormat","UnsignedInt248Type","WebGLRenderTarget","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","CustomBlending","Vector3","MathUtils","DataTexture","RedFormat","FloatType","RepeatWrapping","Pass","FullScreenQuad","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","_SSAOPass","constructor","scene","camera","width","height","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","format","type","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","assign","uniforms","vertexShader","fragmentShader","blending","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","render","renderer","writeBuffer","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get","SSAOPass2"],"sources":["C:/Users/srk/Downloads/arq_phantom_clone/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst SSAOPass = /* @__PURE__ */ (() => {\n  const _SSAOPass = class extends Pass {\n    constructor(scene, camera, width, height) {\n      super();\n      this.width = width !== void 0 ? width : 512;\n      this.height = height !== void 0 ? height : 512;\n      this.clear = true;\n      this.camera = camera;\n      this.scene = scene;\n      this.kernelRadius = 8;\n      this.kernelSize = 32;\n      this.kernel = [];\n      this.noiseTexture = null;\n      this.output = 0;\n      this.minDistance = 5e-3;\n      this.maxDistance = 0.1;\n      this._visibilityCache = /* @__PURE__ */ new Map();\n      this.generateSampleKernel();\n      this.generateRandomKernelRotations();\n      const depthTexture = new DepthTexture();\n      depthTexture.format = DepthStencilFormat;\n      depthTexture.type = UnsignedInt248Type;\n      this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height);\n      this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n        minFilter: NearestFilter,\n        magFilter: NearestFilter,\n        depthTexture\n      });\n      this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n      this.blurRenderTarget = this.ssaoRenderTarget.clone();\n      if (SSAOShader === void 0) {\n        console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n      }\n      this.ssaoMaterial = new ShaderMaterial({\n        defines: Object.assign({}, SSAOShader.defines),\n        uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n        vertexShader: SSAOShader.vertexShader,\n        fragmentShader: SSAOShader.fragmentShader,\n        blending: NoBlending\n      });\n      this.ssaoMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n      this.ssaoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n      this.ssaoMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n      this.ssaoMaterial.uniforms[\"tNoise\"].value = this.noiseTexture;\n      this.ssaoMaterial.uniforms[\"kernel\"].value = this.kernel;\n      this.ssaoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.ssaoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.ssaoMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n      this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.normalMaterial = new MeshNormalMaterial();\n      this.normalMaterial.blending = NoBlending;\n      this.blurMaterial = new ShaderMaterial({\n        defines: Object.assign({}, SSAOBlurShader.defines),\n        uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n        vertexShader: SSAOBlurShader.vertexShader,\n        fragmentShader: SSAOBlurShader.fragmentShader\n      });\n      this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n      this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n      this.depthRenderMaterial = new ShaderMaterial({\n        defines: Object.assign({}, SSAODepthShader.defines),\n        uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n        vertexShader: SSAODepthShader.vertexShader,\n        fragmentShader: SSAODepthShader.fragmentShader,\n        blending: NoBlending\n      });\n      this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n      this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.copyMaterial = new ShaderMaterial({\n        uniforms: UniformsUtils.clone(CopyShader.uniforms),\n        vertexShader: CopyShader.vertexShader,\n        fragmentShader: CopyShader.fragmentShader,\n        transparent: true,\n        depthTest: false,\n        depthWrite: false,\n        blendSrc: DstColorFactor,\n        blendDst: ZeroFactor,\n        blendEquation: AddEquation,\n        blendSrcAlpha: DstAlphaFactor,\n        blendDstAlpha: ZeroFactor,\n        blendEquationAlpha: AddEquation\n      });\n      this.fsQuad = new FullScreenQuad(null);\n      this.originalClearColor = new Color();\n    }\n    dispose() {\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.ssaoRenderTarget.dispose();\n      this.blurRenderTarget.dispose();\n      this.normalMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n    render(renderer, writeBuffer) {\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      this.overrideVisibility();\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n      this.restoreVisibility();\n      this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n      this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n      this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n      this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      switch (this.output) {\n        case _SSAOPass.OUTPUT.SSAO:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Blur:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Default:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = CustomBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        default:\n          console.warn(\"THREE.SSAOPass: Unknown output type.\");\n      }\n    }\n    renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      const originalClearAlpha = renderer.getClearAlpha();\n      const originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n    renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      const originalClearAlpha = renderer.getClearAlpha();\n      const originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n    setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.beautyRenderTarget.setSize(width, height);\n      this.ssaoRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    }\n    generateSampleKernel() {\n      const kernelSize = this.kernelSize;\n      const kernel = this.kernel;\n      for (let i = 0; i < kernelSize; i++) {\n        const sample = new Vector3();\n        sample.x = Math.random() * 2 - 1;\n        sample.y = Math.random() * 2 - 1;\n        sample.z = Math.random();\n        sample.normalize();\n        let scale = i / kernelSize;\n        scale = MathUtils.lerp(0.1, 1, scale * scale);\n        sample.multiplyScalar(scale);\n        kernel.push(sample);\n      }\n    }\n    generateRandomKernelRotations() {\n      const width = 4, height = 4;\n      if (SimplexNoise === void 0) {\n        console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n      }\n      const simplex = new SimplexNoise();\n      const size = width * height;\n      const data = new Float32Array(size);\n      for (let i = 0; i < size; i++) {\n        const x = Math.random() * 2 - 1;\n        const y = Math.random() * 2 - 1;\n        const z = 0;\n        data[i] = simplex.noise3d(x, y, z);\n      }\n      this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n      this.noiseTexture.wrapS = RepeatWrapping;\n      this.noiseTexture.wrapT = RepeatWrapping;\n      this.noiseTexture.needsUpdate = true;\n    }\n    overrideVisibility() {\n      const scene = this.scene;\n      const cache = this._visibilityCache;\n      scene.traverse(function(object) {\n        cache.set(object, object.visible);\n        if (object.isPoints || object.isLine)\n          object.visible = false;\n      });\n    }\n    restoreVisibility() {\n      const scene = this.scene;\n      const cache = this._visibilityCache;\n      scene.traverse(function(object) {\n        const visible = cache.get(object);\n        object.visible = visible;\n      });\n      cache.clear();\n    }\n  };\n  let SSAOPass2 = _SSAOPass;\n  __publicField(SSAOPass2, \"OUTPUT\", {\n    Default: 0,\n    SSAO: 1,\n    Blur: 2,\n    Beauty: 3,\n    Depth: 4,\n    Normal: 5\n  });\n  return SSAOPass2;\n})();\nexport {\n  SSAOPass\n};\n//# sourceMappingURL=SSAOPass.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}