{"ast":null,"code":"import { Object3D, MeshBasicMaterial, MathUtils, Mesh } from \"three\";\nimport { LightningStrike } from \"../geometries/LightningStrike.js\";\nclass LightningStorm extends Object3D {\n  constructor(stormParams = {}) {\n    super();\n    this.isLightningStorm = true;\n    this.stormParams = stormParams;\n    stormParams.size = stormParams.size !== void 0 ? stormParams.size : 1e3;\n    stormParams.minHeight = stormParams.minHeight !== void 0 ? stormParams.minHeight : 80;\n    stormParams.maxHeight = stormParams.maxHeight !== void 0 ? stormParams.maxHeight : 100;\n    stormParams.maxSlope = stormParams.maxSlope !== void 0 ? stormParams.maxSlope : 1.1;\n    stormParams.maxLightnings = stormParams.maxLightnings !== void 0 ? stormParams.maxLightnings : 3;\n    stormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== void 0 ? stormParams.lightningMinPeriod : 3;\n    stormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== void 0 ? stormParams.lightningMaxPeriod : 7;\n    stormParams.lightningMinDuration = stormParams.lightningMinDuration !== void 0 ? stormParams.lightningMinDuration : 1;\n    stormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== void 0 ? stormParams.lightningMaxDuration : 2.5;\n    this.lightningParameters = LightningStrike.copyParameters(stormParams.lightningParameters, stormParams.lightningParameters);\n    this.lightningParameters.isEternal = false;\n    this.lightningMaterial = stormParams.lightningMaterial !== void 0 ? stormParams.lightningMaterial : new MeshBasicMaterial({\n      color: 11599871\n    });\n    if (stormParams.onRayPosition !== void 0) {\n      this.onRayPosition = stormParams.onRayPosition;\n    } else {\n      this.onRayPosition = function (source, dest) {\n        dest.set((Math.random() - 0.5) * stormParams.size, 0, (Math.random() - 0.5) * stormParams.size);\n        const height = MathUtils.lerp(stormParams.minHeight, stormParams.maxHeight, Math.random());\n        source.set(stormParams.maxSlope * (2 * Math.random() - 1), 1, stormParams.maxSlope * (2 * Math.random() - 1)).multiplyScalar(height).add(dest);\n      };\n    }\n    this.onLightningDown = stormParams.onLightningDown;\n    this.inited = false;\n    this.nextLightningTime = 0;\n    this.lightningsMeshes = [];\n    this.deadLightningsMeshes = [];\n    for (let i = 0; i < this.stormParams.maxLightnings; i++) {\n      const lightning = new LightningStrike(LightningStrike.copyParameters({}, this.lightningParameters));\n      const mesh = new Mesh(lightning, this.lightningMaterial);\n      this.deadLightningsMeshes.push(mesh);\n    }\n  }\n  update(time) {\n    if (!this.inited) {\n      this.nextLightningTime = this.getNextLightningTime(time) * Math.random();\n      this.inited = true;\n    }\n    if (time >= this.nextLightningTime) {\n      const lightningMesh = this.deadLightningsMeshes.pop();\n      if (lightningMesh) {\n        const lightningParams1 = LightningStrike.copyParameters(lightningMesh.geometry.rayParameters, this.lightningParameters);\n        lightningParams1.birthTime = time;\n        lightningParams1.deathTime = time + MathUtils.lerp(this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random());\n        this.onRayPosition(lightningParams1.sourceOffset, lightningParams1.destOffset);\n        lightningParams1.noiseSeed = Math.random();\n        this.add(lightningMesh);\n        this.lightningsMeshes.push(lightningMesh);\n      }\n      this.nextLightningTime = this.getNextLightningTime(time);\n    }\n    let i = 0,\n      il = this.lightningsMeshes.length;\n    while (i < il) {\n      const mesh = this.lightningsMeshes[i];\n      const lightning = mesh.geometry;\n      const prevState = lightning.state;\n      lightning.update(time);\n      if (prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState) {\n        if (this.onLightningDown) {\n          this.onLightningDown(lightning);\n        }\n      }\n      if (lightning.state === LightningStrike.RAY_EXTINGUISHED) {\n        this.lightningsMeshes.splice(this.lightningsMeshes.indexOf(mesh), 1);\n        this.deadLightningsMeshes.push(mesh);\n        this.remove(mesh);\n        il--;\n      } else {\n        i++;\n      }\n    }\n  }\n  getNextLightningTime(currentTime) {\n    return currentTime + MathUtils.lerp(this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random()) / (this.stormParams.maxLightnings + 1);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.stormParams.size = source.stormParams.size;\n    this.stormParams.minHeight = source.stormParams.minHeight;\n    this.stormParams.maxHeight = source.stormParams.maxHeight;\n    this.stormParams.maxSlope = source.stormParams.maxSlope;\n    this.stormParams.maxLightnings = source.stormParams.maxLightnings;\n    this.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\n    this.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\n    this.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\n    this.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\n    this.lightningParameters = LightningStrike.copyParameters({}, source.lightningParameters);\n    this.lightningMaterial = source.stormParams.lightningMaterial;\n    this.onLightningDown = source.onLightningDown;\n    return this;\n  }\n  clone() {\n    return new this.constructor(this.stormParams).copy(this);\n  }\n}\nexport { LightningStorm };","map":{"version":3,"names":["Object3D","MeshBasicMaterial","MathUtils","Mesh","LightningStrike","LightningStorm","constructor","stormParams","isLightningStorm","size","minHeight","maxHeight","maxSlope","maxLightnings","lightningMinPeriod","lightningMaxPeriod","lightningMinDuration","lightningMaxDuration","lightningParameters","copyParameters","isEternal","lightningMaterial","color","onRayPosition","source","dest","set","Math","random","height","lerp","multiplyScalar","add","onLightningDown","inited","nextLightningTime","lightningsMeshes","deadLightningsMeshes","i","lightning","mesh","push","update","time","getNextLightningTime","lightningMesh","pop","lightningParams1","geometry","rayParameters","birthTime","deathTime","sourceOffset","destOffset","noiseSeed","il","length","prevState","state","RAY_PROPAGATING","RAY_EXTINGUISHED","splice","indexOf","remove","currentTime","copy","recursive","clone"],"sources":["C:/Users/srk/Downloads/arq_phantom_clone/node_modules/three-stdlib/objects/LightningStorm.js"],"sourcesContent":["import { Object3D, MeshBasicMaterial, MathUtils, Mesh } from \"three\";\nimport { LightningStrike } from \"../geometries/LightningStrike.js\";\nclass LightningStorm extends Object3D {\n  constructor(stormParams = {}) {\n    super();\n    this.isLightningStorm = true;\n    this.stormParams = stormParams;\n    stormParams.size = stormParams.size !== void 0 ? stormParams.size : 1e3;\n    stormParams.minHeight = stormParams.minHeight !== void 0 ? stormParams.minHeight : 80;\n    stormParams.maxHeight = stormParams.maxHeight !== void 0 ? stormParams.maxHeight : 100;\n    stormParams.maxSlope = stormParams.maxSlope !== void 0 ? stormParams.maxSlope : 1.1;\n    stormParams.maxLightnings = stormParams.maxLightnings !== void 0 ? stormParams.maxLightnings : 3;\n    stormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== void 0 ? stormParams.lightningMinPeriod : 3;\n    stormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== void 0 ? stormParams.lightningMaxPeriod : 7;\n    stormParams.lightningMinDuration = stormParams.lightningMinDuration !== void 0 ? stormParams.lightningMinDuration : 1;\n    stormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== void 0 ? stormParams.lightningMaxDuration : 2.5;\n    this.lightningParameters = LightningStrike.copyParameters(\n      stormParams.lightningParameters,\n      stormParams.lightningParameters\n    );\n    this.lightningParameters.isEternal = false;\n    this.lightningMaterial = stormParams.lightningMaterial !== void 0 ? stormParams.lightningMaterial : new MeshBasicMaterial({ color: 11599871 });\n    if (stormParams.onRayPosition !== void 0) {\n      this.onRayPosition = stormParams.onRayPosition;\n    } else {\n      this.onRayPosition = function(source, dest) {\n        dest.set((Math.random() - 0.5) * stormParams.size, 0, (Math.random() - 0.5) * stormParams.size);\n        const height = MathUtils.lerp(stormParams.minHeight, stormParams.maxHeight, Math.random());\n        source.set(stormParams.maxSlope * (2 * Math.random() - 1), 1, stormParams.maxSlope * (2 * Math.random() - 1)).multiplyScalar(height).add(dest);\n      };\n    }\n    this.onLightningDown = stormParams.onLightningDown;\n    this.inited = false;\n    this.nextLightningTime = 0;\n    this.lightningsMeshes = [];\n    this.deadLightningsMeshes = [];\n    for (let i = 0; i < this.stormParams.maxLightnings; i++) {\n      const lightning = new LightningStrike(LightningStrike.copyParameters({}, this.lightningParameters));\n      const mesh = new Mesh(lightning, this.lightningMaterial);\n      this.deadLightningsMeshes.push(mesh);\n    }\n  }\n  update(time) {\n    if (!this.inited) {\n      this.nextLightningTime = this.getNextLightningTime(time) * Math.random();\n      this.inited = true;\n    }\n    if (time >= this.nextLightningTime) {\n      const lightningMesh = this.deadLightningsMeshes.pop();\n      if (lightningMesh) {\n        const lightningParams1 = LightningStrike.copyParameters(\n          lightningMesh.geometry.rayParameters,\n          this.lightningParameters\n        );\n        lightningParams1.birthTime = time;\n        lightningParams1.deathTime = time + MathUtils.lerp(this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random());\n        this.onRayPosition(lightningParams1.sourceOffset, lightningParams1.destOffset);\n        lightningParams1.noiseSeed = Math.random();\n        this.add(lightningMesh);\n        this.lightningsMeshes.push(lightningMesh);\n      }\n      this.nextLightningTime = this.getNextLightningTime(time);\n    }\n    let i = 0, il = this.lightningsMeshes.length;\n    while (i < il) {\n      const mesh = this.lightningsMeshes[i];\n      const lightning = mesh.geometry;\n      const prevState = lightning.state;\n      lightning.update(time);\n      if (prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState) {\n        if (this.onLightningDown) {\n          this.onLightningDown(lightning);\n        }\n      }\n      if (lightning.state === LightningStrike.RAY_EXTINGUISHED) {\n        this.lightningsMeshes.splice(this.lightningsMeshes.indexOf(mesh), 1);\n        this.deadLightningsMeshes.push(mesh);\n        this.remove(mesh);\n        il--;\n      } else {\n        i++;\n      }\n    }\n  }\n  getNextLightningTime(currentTime) {\n    return currentTime + MathUtils.lerp(this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random()) / (this.stormParams.maxLightnings + 1);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.stormParams.size = source.stormParams.size;\n    this.stormParams.minHeight = source.stormParams.minHeight;\n    this.stormParams.maxHeight = source.stormParams.maxHeight;\n    this.stormParams.maxSlope = source.stormParams.maxSlope;\n    this.stormParams.maxLightnings = source.stormParams.maxLightnings;\n    this.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\n    this.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\n    this.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\n    this.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\n    this.lightningParameters = LightningStrike.copyParameters({}, source.lightningParameters);\n    this.lightningMaterial = source.stormParams.lightningMaterial;\n    this.onLightningDown = source.onLightningDown;\n    return this;\n  }\n  clone() {\n    return new this.constructor(this.stormParams).copy(this);\n  }\n}\nexport {\n  LightningStorm\n};\n//# sourceMappingURL=LightningStorm.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}