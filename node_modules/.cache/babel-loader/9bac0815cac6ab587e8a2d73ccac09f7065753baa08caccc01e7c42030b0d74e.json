{"ast":null,"code":"import { BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute, Mesh, MeshBasicMaterial, Vector3, Texture, NearestFilter, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4 } from \"three\";\nconst Lensflare = /* @__PURE__ */(() => {\n  class Lensflare2 extends Mesh {\n    constructor() {\n      super(Lensflare2.Geometry, new MeshBasicMaterial({\n        opacity: 0,\n        transparent: true\n      }));\n      this.isLensflare = true;\n      this.type = \"Lensflare\";\n      this.frustumCulled = false;\n      this.renderOrder = Infinity;\n      const positionScreen = new Vector3();\n      const positionView = new Vector3();\n      const tempMap = new Texture({\n        width: 16,\n        height: 16\n      });\n      tempMap.isFramebufferTexture = true;\n      tempMap.magFilter = NearestFilter;\n      tempMap.minFilter = NearestFilter;\n      tempMap.generateMipmaps = false;\n      tempMap.needsUpdate = true;\n      const occlusionMap = new Texture({\n        width: 16,\n        height: 16\n      });\n      occlusionMap.isFramebufferTexture = true;\n      occlusionMap.magFilter = NearestFilter;\n      occlusionMap.minFilter = NearestFilter;\n      occlusionMap.generateMipmaps = false;\n      occlusionMap.needsUpdate = true;\n      const geometry = Lensflare2.Geometry;\n      const material1a = new RawShaderMaterial({\n        uniforms: {\n          scale: {\n            value: null\n          },\n          screenPosition: {\n            value: null\n          }\n        },\n        vertexShader: (/* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`),\n        fragmentShader: (/* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\t\t\t}`),\n        depthTest: true,\n        depthWrite: false,\n        transparent: false\n      });\n      const material1b = new RawShaderMaterial({\n        uniforms: {\n          map: {\n            value: tempMap\n          },\n          scale: {\n            value: null\n          },\n          screenPosition: {\n            value: null\n          }\n        },\n        vertexShader: (/* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUV = uv;\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`),\n        fragmentShader: (/* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = texture2D( map, vUV );\n\n\t\t\t\t}`),\n        depthTest: false,\n        depthWrite: false,\n        transparent: false\n      });\n      const mesh1 = new Mesh(geometry, material1a);\n      const elements = [];\n      const shader = LensflareElement.Shader;\n      const material2 = new RawShaderMaterial({\n        uniforms: {\n          map: {\n            value: null\n          },\n          occlusionMap: {\n            value: occlusionMap\n          },\n          color: {\n            value: new Color(16777215)\n          },\n          scale: {\n            value: new Vector2()\n          },\n          screenPosition: {\n            value: new Vector3()\n          }\n        },\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader,\n        blending: AdditiveBlending,\n        transparent: true,\n        depthWrite: false\n      });\n      const mesh2 = new Mesh(geometry, material2);\n      this.addElement = function (element) {\n        elements.push(element);\n      };\n      const scale = new Vector2();\n      const screenPositionPixels = new Vector2();\n      const validArea = new Box2();\n      const viewport = new Vector4();\n      this.onBeforeRender = function (renderer, scene, camera) {\n        renderer.getCurrentViewport(viewport);\n        const invAspect = viewport.w / viewport.z;\n        const halfViewportWidth = viewport.z / 2;\n        const halfViewportHeight = viewport.w / 2;\n        let size = 16 / viewport.w;\n        scale.set(size * invAspect, size);\n        validArea.min.set(viewport.x, viewport.y);\n        validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n        positionView.setFromMatrixPosition(this.matrixWorld);\n        positionView.applyMatrix4(camera.matrixWorldInverse);\n        if (positionView.z > 0) return;\n        positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n        screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n        screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n        if (validArea.containsPoint(screenPositionPixels)) {\n          renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n          let uniforms = material1a.uniforms;\n          uniforms[\"scale\"].value = scale;\n          uniforms[\"screenPosition\"].value = positionScreen;\n          renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null);\n          renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n          uniforms = material1b.uniforms;\n          uniforms[\"scale\"].value = scale;\n          uniforms[\"screenPosition\"].value = positionScreen;\n          renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null);\n          const vecX = -positionScreen.x * 2;\n          const vecY = -positionScreen.y * 2;\n          for (let i = 0, l = elements.length; i < l; i++) {\n            const element = elements[i];\n            const uniforms2 = material2.uniforms;\n            uniforms2[\"color\"].value.copy(element.color);\n            uniforms2[\"map\"].value = element.texture;\n            uniforms2[\"screenPosition\"].value.x = positionScreen.x + vecX * element.distance;\n            uniforms2[\"screenPosition\"].value.y = positionScreen.y + vecY * element.distance;\n            size = element.size / viewport.w;\n            const invAspect2 = viewport.w / viewport.z;\n            uniforms2[\"scale\"].value.set(size * invAspect2, size);\n            material2.uniformsNeedUpdate = true;\n            renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n          }\n        }\n      };\n      this.dispose = function () {\n        material1a.dispose();\n        material1b.dispose();\n        material2.dispose();\n        tempMap.dispose();\n        occlusionMap.dispose();\n        for (let i = 0, l = elements.length; i < l; i++) {\n          elements[i].texture.dispose();\n        }\n      };\n    }\n  }\n  const _geometry = new BufferGeometry();\n  const interleavedBuffer = new InterleavedBuffer(new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]), 5);\n  _geometry.setIndex([0, 1, 2, 0, 2, 3]);\n  _geometry.setAttribute(\"position\", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n  _geometry.setAttribute(\"uv\", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n  Lensflare2.Geometry = _geometry;\n  return Lensflare2;\n})();\nconst LensflareElement = /* @__PURE__ */(() => {\n  class LensflareElement2 {\n    constructor(texture, size = 1, distance = 0, color = new Color(16777215)) {\n      this.texture = texture;\n      this.size = size;\n      this.distance = distance;\n      this.color = color;\n    }\n  }\n  LensflareElement2.Shader = {\n    uniforms: {\n      map: {\n        value: null\n      },\n      occlusionMap: {\n        value: null\n      },\n      color: {\n        value: null\n      },\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: (/* glsl */\n    `\n\n      precision highp float;\n\n      uniform vec3 screenPosition;\n      uniform vec2 scale;\n\n      uniform sampler2D occlusionMap;\n\n      attribute vec3 position;\n      attribute vec2 uv;\n\n      varying vec2 vUV;\n      varying float vVisibility;\n\n      void main() {\n\n        vUV = uv;\n\n        vec2 pos = position.xy;\n\n        vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\n        vVisibility =        visibility.r / 9.0;\n        vVisibility *= 1.0 - visibility.g / 9.0;\n        vVisibility *=       visibility.b / 9.0;\n\n        gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n\n      }\n    `),\n    fragmentShader: (/* glsl */\n    `\n\n      precision highp float;\n\n      uniform sampler2D map;\n      uniform vec3 color;\n\n      varying vec2 vUV;\n      varying float vVisibility;\n\n      void main() {\n\n        vec4 texture = texture2D( map, vUV );\n        texture.a *= vVisibility;\n        gl_FragColor = texture;\n        gl_FragColor.rgb *= color;\n\n      }\n    `)\n  };\n  return LensflareElement2;\n})();\nexport { Lensflare, LensflareElement };","map":{"version":3,"names":["BufferGeometry","InterleavedBuffer","InterleavedBufferAttribute","Mesh","MeshBasicMaterial","Vector3","Texture","NearestFilter","RawShaderMaterial","Color","Vector2","AdditiveBlending","Box2","Vector4","Lensflare","Lensflare2","constructor","Geometry","opacity","transparent","isLensflare","type","frustumCulled","renderOrder","Infinity","positionScreen","positionView","tempMap","width","height","isFramebufferTexture","magFilter","minFilter","generateMipmaps","needsUpdate","occlusionMap","geometry","material1a","uniforms","scale","value","screenPosition","vertexShader","fragmentShader","depthTest","depthWrite","material1b","map","mesh1","elements","shader","LensflareElement","Shader","material2","color","blending","mesh2","addElement","element","push","screenPositionPixels","validArea","viewport","onBeforeRender","renderer","scene","camera","getCurrentViewport","invAspect","w","z","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","i","l","length","uniforms2","texture","distance","invAspect2","uniformsNeedUpdate","dispose","_geometry","interleavedBuffer","Float32Array","setIndex","setAttribute","LensflareElement2"],"sources":["C:/Users/srk/Downloads/arq_phantom_clone/node_modules/three-stdlib/objects/Lensflare.js"],"sourcesContent":["import { BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute, Mesh, MeshBasicMaterial, Vector3, Texture, NearestFilter, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4 } from \"three\";\nconst Lensflare = /* @__PURE__ */ (() => {\n  class Lensflare2 extends Mesh {\n    constructor() {\n      super(Lensflare2.Geometry, new MeshBasicMaterial({ opacity: 0, transparent: true }));\n      this.isLensflare = true;\n      this.type = \"Lensflare\";\n      this.frustumCulled = false;\n      this.renderOrder = Infinity;\n      const positionScreen = new Vector3();\n      const positionView = new Vector3();\n      const tempMap = new Texture({ width: 16, height: 16 });\n      tempMap.isFramebufferTexture = true;\n      tempMap.magFilter = NearestFilter;\n      tempMap.minFilter = NearestFilter;\n      tempMap.generateMipmaps = false;\n      tempMap.needsUpdate = true;\n      const occlusionMap = new Texture({ width: 16, height: 16 });\n      occlusionMap.isFramebufferTexture = true;\n      occlusionMap.magFilter = NearestFilter;\n      occlusionMap.minFilter = NearestFilter;\n      occlusionMap.generateMipmaps = false;\n      occlusionMap.needsUpdate = true;\n      const geometry = Lensflare2.Geometry;\n      const material1a = new RawShaderMaterial({\n        uniforms: {\n          scale: { value: null },\n          screenPosition: { value: null }\n        },\n        vertexShader: (\n          /* glsl */\n          `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`\n        ),\n        fragmentShader: (\n          /* glsl */\n          `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\t\t\t}`\n        ),\n        depthTest: true,\n        depthWrite: false,\n        transparent: false\n      });\n      const material1b = new RawShaderMaterial({\n        uniforms: {\n          map: { value: tempMap },\n          scale: { value: null },\n          screenPosition: { value: null }\n        },\n        vertexShader: (\n          /* glsl */\n          `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUV = uv;\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`\n        ),\n        fragmentShader: (\n          /* glsl */\n          `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = texture2D( map, vUV );\n\n\t\t\t\t}`\n        ),\n        depthTest: false,\n        depthWrite: false,\n        transparent: false\n      });\n      const mesh1 = new Mesh(geometry, material1a);\n      const elements = [];\n      const shader = LensflareElement.Shader;\n      const material2 = new RawShaderMaterial({\n        uniforms: {\n          map: { value: null },\n          occlusionMap: { value: occlusionMap },\n          color: { value: new Color(16777215) },\n          scale: { value: new Vector2() },\n          screenPosition: { value: new Vector3() }\n        },\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader,\n        blending: AdditiveBlending,\n        transparent: true,\n        depthWrite: false\n      });\n      const mesh2 = new Mesh(geometry, material2);\n      this.addElement = function(element) {\n        elements.push(element);\n      };\n      const scale = new Vector2();\n      const screenPositionPixels = new Vector2();\n      const validArea = new Box2();\n      const viewport = new Vector4();\n      this.onBeforeRender = function(renderer, scene, camera) {\n        renderer.getCurrentViewport(viewport);\n        const invAspect = viewport.w / viewport.z;\n        const halfViewportWidth = viewport.z / 2;\n        const halfViewportHeight = viewport.w / 2;\n        let size = 16 / viewport.w;\n        scale.set(size * invAspect, size);\n        validArea.min.set(viewport.x, viewport.y);\n        validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n        positionView.setFromMatrixPosition(this.matrixWorld);\n        positionView.applyMatrix4(camera.matrixWorldInverse);\n        if (positionView.z > 0)\n          return;\n        positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n        screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n        screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n        if (validArea.containsPoint(screenPositionPixels)) {\n          renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n          let uniforms = material1a.uniforms;\n          uniforms[\"scale\"].value = scale;\n          uniforms[\"screenPosition\"].value = positionScreen;\n          renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null);\n          renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n          uniforms = material1b.uniforms;\n          uniforms[\"scale\"].value = scale;\n          uniforms[\"screenPosition\"].value = positionScreen;\n          renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null);\n          const vecX = -positionScreen.x * 2;\n          const vecY = -positionScreen.y * 2;\n          for (let i = 0, l = elements.length; i < l; i++) {\n            const element = elements[i];\n            const uniforms2 = material2.uniforms;\n            uniforms2[\"color\"].value.copy(element.color);\n            uniforms2[\"map\"].value = element.texture;\n            uniforms2[\"screenPosition\"].value.x = positionScreen.x + vecX * element.distance;\n            uniforms2[\"screenPosition\"].value.y = positionScreen.y + vecY * element.distance;\n            size = element.size / viewport.w;\n            const invAspect2 = viewport.w / viewport.z;\n            uniforms2[\"scale\"].value.set(size * invAspect2, size);\n            material2.uniformsNeedUpdate = true;\n            renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n          }\n        }\n      };\n      this.dispose = function() {\n        material1a.dispose();\n        material1b.dispose();\n        material2.dispose();\n        tempMap.dispose();\n        occlusionMap.dispose();\n        for (let i = 0, l = elements.length; i < l; i++) {\n          elements[i].texture.dispose();\n        }\n      };\n    }\n  }\n  const _geometry = new BufferGeometry();\n  const interleavedBuffer = new InterleavedBuffer(\n    new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]),\n    5\n  );\n  _geometry.setIndex([0, 1, 2, 0, 2, 3]);\n  _geometry.setAttribute(\"position\", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n  _geometry.setAttribute(\"uv\", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n  Lensflare2.Geometry = _geometry;\n  return Lensflare2;\n})();\nconst LensflareElement = /* @__PURE__ */ (() => {\n  class LensflareElement2 {\n    constructor(texture, size = 1, distance = 0, color = new Color(16777215)) {\n      this.texture = texture;\n      this.size = size;\n      this.distance = distance;\n      this.color = color;\n    }\n  }\n  LensflareElement2.Shader = {\n    uniforms: {\n      map: { value: null },\n      occlusionMap: { value: null },\n      color: { value: null },\n      scale: { value: null },\n      screenPosition: { value: null }\n    },\n    vertexShader: (\n      /* glsl */\n      `\n\n      precision highp float;\n\n      uniform vec3 screenPosition;\n      uniform vec2 scale;\n\n      uniform sampler2D occlusionMap;\n\n      attribute vec3 position;\n      attribute vec2 uv;\n\n      varying vec2 vUV;\n      varying float vVisibility;\n\n      void main() {\n\n        vUV = uv;\n\n        vec2 pos = position.xy;\n\n        vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n        visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\n        vVisibility =        visibility.r / 9.0;\n        vVisibility *= 1.0 - visibility.g / 9.0;\n        vVisibility *=       visibility.b / 9.0;\n\n        gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n\n      }\n    `\n    ),\n    fragmentShader: (\n      /* glsl */\n      `\n\n      precision highp float;\n\n      uniform sampler2D map;\n      uniform vec3 color;\n\n      varying vec2 vUV;\n      varying float vVisibility;\n\n      void main() {\n\n        vec4 texture = texture2D( map, vUV );\n        texture.a *= vVisibility;\n        gl_FragColor = texture;\n        gl_FragColor.rgb *= color;\n\n      }\n    `\n    )\n  };\n  return LensflareElement2;\n})();\nexport {\n  Lensflare,\n  LensflareElement\n};\n//# sourceMappingURL=Lensflare.js.map\n"],"mappings":"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,CAACzC,KAAK,GAAGA,KAAK;IACpB;EACF;EACAkD,iBAAiB,CAACpD,MAAM,GAAG;IACzBd,QAAQ,EAAE;MACRS,GAAG,EAAE;QAAEP,KAAK,EAAE;MAAK,CAAC;MACpBL,YAAY,EAAE;QAAEK,KAAK,EAAE;MAAK,CAAC;MAC7Bc,KAAK,EAAE;QAAEd,KAAK,EAAE;MAAK,CAAC;MACtBD,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAK,CAAC;MACtBC,cAAc,EAAE;QAAED,KAAK,EAAE;MAAK;IAChC,CAAC;IACDE,YAAY,GACV;IACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CACA;IACDC,cAAc,GACZ;IACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EAEH,CAAC;EACD,OAAO6D,iBAAiB;AAC1B,CAAC,EAAE,CAAC;AACJ,SACE1F,SAAS,EACTqC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}