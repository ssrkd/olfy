{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srk\\\\Downloads\\\\arq_phantom_clone\\\\src\\\\components\\\\Carousel3D.jsx\",\n  _s = $RefreshSig$();\n// src/components/Carousel3D.jsx\nimport React, { Suspense, useEffect, useRef } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Html, useTexture } from '@react-three/drei';\nimport * as THREE from 'three';\nimport styled from 'styled-components';\n\n// Массив с фото и видео (размести в public/assets/)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst media = [{\n  type: 'image',\n  url: '/assets/img1.jpg'\n}, {\n  type: 'image',\n  url: '/assets/img2.jpg'\n}, {\n  type: 'image',\n  url: '/assets/img3.jpg'\n}, {\n  type: 'video',\n  url: '/assets/video1.mp4'\n}, {\n  type: 'image',\n  url: '/assets/img4.jpg'\n}, {\n  type: 'video',\n  url: '/assets/video2.mp4'\n}];\n\n// Компонент для отображения фото или видео\nfunction MediaPlane({\n  media,\n  position,\n  rotation\n}) {\n  _s();\n  const {\n    type,\n    url\n  } = media;\n  const meshRef = useRef();\n  const videoRef = useRef();\n  const [videoTexture, setVideoTexture] = React.useState(null);\n  useEffect(() => {\n    if (type === 'video') {\n      const video = document.createElement('video');\n      video.src = url;\n      video.crossOrigin = 'anonymous';\n      video.loop = true;\n      video.muted = true;\n      video.playsInline = true;\n      video.autoplay = true;\n      video.play().then(() => {\n        const texture = new THREE.VideoTexture(video);\n        setVideoTexture(texture);\n      }).catch(e => {\n        console.warn('Video autoplay blocked:', e);\n      });\n    }\n  }, [type, url]);\n  if (type === 'video' && videoTexture) {\n    return /*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: meshRef,\n      position: position,\n      rotation: rotation,\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [3, 2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        map: videoTexture,\n        toneMapped: false,\n        transparent: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n  if (type === 'image') {\n    const texture = useTexture(url);\n    return /*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: meshRef,\n      position: position,\n      rotation: rotation,\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [3, 2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        map: texture,\n        toneMapped: false,\n        transparent: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n  return null;\n}\n\n// Изогнутая сетка медиа (VR-стена)\n_s(MediaPlane, \"XBp1SRvjEzRs7HOXmQ/5rnexmj4=\", false, function () {\n  return [useTexture];\n});\n_c = MediaPlane;\nfunction CurvedMediaGrid({\n  itemsPerRow = 5,\n  radius = 8\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: media.map((m, i) => {\n      const row = Math.floor(i / itemsPerRow);\n      const col = i % itemsPerRow;\n      const angle = (col - (itemsPerRow - 1) / 2) / itemsPerRow * Math.PI;\n      const x = Math.sin(angle) * radius;\n      const z = Math.cos(angle) * radius;\n      const y = 1.5 - row * 3;\n      return /*#__PURE__*/_jsxDEV(MediaPlane, {\n        media: m,\n        position: [x, y, z],\n        rotation: [0, angle, 0]\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false);\n}\n\n// Главный компонент\n_c2 = CurvedMediaGrid;\nconst Carousel3D = () => {\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 10],\n        fov: 60\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 1.2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: /*#__PURE__*/_jsxDEV(Html, {\n          center: true,\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(CurvedMediaGrid, {\n          itemsPerRow: 5,\n          radius: 9\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enableZoom: false,\n        enablePan: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_c3 = Carousel3D;\nexport default Carousel3D;\n\n// Обёртка\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  background: radial-gradient(circle, #000000, #111111);\n  cursor: grab;\n  overflow: hidden;\n`;\n_c4 = Wrapper;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MediaPlane\");\n$RefreshReg$(_c2, \"CurvedMediaGrid\");\n$RefreshReg$(_c3, \"Carousel3D\");\n$RefreshReg$(_c4, \"Wrapper\");","map":{"version":3,"names":["React","Suspense","useEffect","useRef","Canvas","OrbitControls","Html","useTexture","THREE","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","media","type","url","MediaPlane","position","rotation","_s","meshRef","videoRef","videoTexture","setVideoTexture","useState","video","document","createElement","src","crossOrigin","loop","muted","playsInline","autoplay","play","then","texture","VideoTexture","catch","e","console","warn","ref","children","args","fileName","_jsxFileName","lineNumber","columnNumber","map","toneMapped","transparent","_c","CurvedMediaGrid","itemsPerRow","radius","m","i","row","Math","floor","col","angle","PI","x","sin","z","cos","y","_c2","Carousel3D","Wrapper","camera","fov","intensity","fallback","center","enableZoom","enablePan","_c3","div","_c4","$RefreshReg$"],"sources":["C:/Users/srk/Downloads/arq_phantom_clone/src/components/Carousel3D.jsx"],"sourcesContent":["// src/components/Carousel3D.jsx\r\nimport React, { Suspense, useEffect, useRef } from 'react';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport { OrbitControls, Html, useTexture } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\nimport styled from 'styled-components';\r\n\r\n// Массив с фото и видео (размести в public/assets/)\r\nconst media = [\r\n  { type: 'image', url: '/assets/img1.jpg' },\r\n  { type: 'image', url: '/assets/img2.jpg' },\r\n  { type: 'image', url: '/assets/img3.jpg' },\r\n  { type: 'video', url: '/assets/video1.mp4' },\r\n  { type: 'image', url: '/assets/img4.jpg' },\r\n  { type: 'video', url: '/assets/video2.mp4' },\r\n];\r\n\r\n// Компонент для отображения фото или видео\r\nfunction MediaPlane({ media, position, rotation }) {\r\n  const { type, url } = media;\r\n  const meshRef = useRef();\r\n  const videoRef = useRef();\r\n\r\n  const [videoTexture, setVideoTexture] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    if (type === 'video') {\r\n      const video = document.createElement('video');\r\n      video.src = url;\r\n      video.crossOrigin = 'anonymous';\r\n      video.loop = true;\r\n      video.muted = true;\r\n      video.playsInline = true;\r\n      video.autoplay = true;\r\n\r\n      video\r\n        .play()\r\n        .then(() => {\r\n          const texture = new THREE.VideoTexture(video);\r\n          setVideoTexture(texture);\r\n        })\r\n        .catch((e) => {\r\n          console.warn('Video autoplay blocked:', e);\r\n        });\r\n    }\r\n  }, [type, url]);\r\n\r\n  if (type === 'video' && videoTexture) {\r\n    return (\r\n      <mesh ref={meshRef} position={position} rotation={rotation}>\r\n        <planeGeometry args={[3, 2]} />\r\n        <meshBasicMaterial map={videoTexture} toneMapped={false} transparent />\r\n      </mesh>\r\n    );\r\n  }\r\n\r\n  if (type === 'image') {\r\n    const texture = useTexture(url);\r\n    return (\r\n      <mesh ref={meshRef} position={position} rotation={rotation}>\r\n        <planeGeometry args={[3, 2]} />\r\n        <meshBasicMaterial map={texture} toneMapped={false} transparent />\r\n      </mesh>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n\r\n// Изогнутая сетка медиа (VR-стена)\r\nfunction CurvedMediaGrid({ itemsPerRow = 5, radius = 8 }) {\r\n  return (\r\n    <>\r\n      {media.map((m, i) => {\r\n        const row = Math.floor(i / itemsPerRow);\r\n        const col = i % itemsPerRow;\r\n        const angle = ((col - (itemsPerRow - 1) / 2) / itemsPerRow) * Math.PI;\r\n\r\n        const x = Math.sin(angle) * radius;\r\n        const z = Math.cos(angle) * radius;\r\n        const y = 1.5 - row * 3;\r\n\r\n        return (\r\n          <MediaPlane\r\n            key={i}\r\n            media={m}\r\n            position={[x, y, z]}\r\n            rotation={[0, angle, 0]}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\n// Главный компонент\r\nconst Carousel3D = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Canvas camera={{ position: [0, 0, 10], fov: 60 }}>\r\n        <ambientLight intensity={1.2} />\r\n        <Suspense fallback={<Html center>Loading...</Html>}>\r\n          <CurvedMediaGrid itemsPerRow={5} radius={9} />\r\n        </Suspense>\r\n        <OrbitControls enableZoom={false} enablePan={false} />\r\n      </Canvas>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Carousel3D;\r\n\r\n// Обёртка\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: radial-gradient(circle, #000000, #111111);\r\n  cursor: grab;\r\n  overflow: hidden;\r\n`;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}