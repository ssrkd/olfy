{"ast":null,"code":"import { Object3D, Vector3, Quaternion, AnimationMixer } from \"three\";\nimport { CCDIKSolver } from \"./CCDIKSolver.js\";\nimport { MMDPhysics } from \"./MMDPhysics.js\";\nclass MMDAnimationHelper {\n  /**\n   * @param {Object} params - (optional)\n   * @param {boolean} params.sync - Whether animation durations of added objects are synched. Default is true.\n   * @param {Number} params.afterglow - Default is 0.0.\n   * @param {boolean} params.resetPhysicsOnLoop - Default is true.\n   */\n  constructor(params = {}) {\n    this.meshes = [];\n    this.camera = null;\n    this.cameraTarget = new Object3D();\n    this.cameraTarget.name = \"target\";\n    this.audio = null;\n    this.audioManager = null;\n    this.objects = /* @__PURE__ */new WeakMap();\n    this.configuration = {\n      sync: params.sync !== void 0 ? params.sync : true,\n      afterglow: params.afterglow !== void 0 ? params.afterglow : 0,\n      resetPhysicsOnLoop: params.resetPhysicsOnLoop !== void 0 ? params.resetPhysicsOnLoop : true,\n      pmxAnimation: params.pmxAnimation !== void 0 ? params.pmxAnimation : false\n    };\n    this.enabled = {\n      animation: true,\n      ik: true,\n      grant: true,\n      physics: true,\n      cameraAnimation: true\n    };\n    this.onBeforePhysics = function () {};\n    this.sharedPhysics = false;\n    this.masterPhysics = null;\n  }\n  /**\n   * Adds an Three.js Object to helper and setups animation.\n   * The anmation durations of added objects are synched\n   * if this.configuration.sync is true.\n   *\n   * @param {THREE.SkinnedMesh|THREE.Camera|THREE.Audio} object\n   * @param {Object} params - (optional)\n   * @param {THREE.AnimationClip|Array<THREE.AnimationClip>} params.animation - Only for THREE.SkinnedMesh and THREE.Camera. Default is undefined.\n   * @param {boolean} params.physics - Only for THREE.SkinnedMesh. Default is true.\n   * @param {Integer} params.warmup - Only for THREE.SkinnedMesh and physics is true. Default is 60.\n   * @param {Number} params.unitStep - Only for THREE.SkinnedMesh and physics is true. Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Only for THREE.SkinnedMesh and physics is true. Default is 3.\n   * @param {Vector3} params.gravity - Only for THREE.SkinnedMesh and physics is true. Default ( 0, - 9.8 * 10, 0 ).\n   * @param {Number} params.delayTime - Only for THREE.Audio. Default is 0.0.\n   * @return {MMDAnimationHelper}\n   */\n  add(object, params = {}) {\n    if (object.isSkinnedMesh) {\n      this._addMesh(object, params);\n    } else if (object.isCamera) {\n      this._setupCamera(object, params);\n    } else if (object.type === \"Audio\") {\n      this._setupAudio(object, params);\n    } else {\n      throw new Error(\"THREE.MMDAnimationHelper.add: accepts only THREE.SkinnedMesh or THREE.Camera or THREE.Audio instance.\");\n    }\n    if (this.configuration.sync) this._syncDuration();\n    return this;\n  }\n  /**\n   * Removes an Three.js Object from helper.\n   *\n   * @param {THREE.SkinnedMesh|THREE.Camera|THREE.Audio} object\n   * @return {MMDAnimationHelper}\n   */\n  remove(object) {\n    if (object.isSkinnedMesh) {\n      this._removeMesh(object);\n    } else if (object.isCamera) {\n      this._clearCamera(object);\n    } else if (object.type === \"Audio\") {\n      this._clearAudio(object);\n    } else {\n      throw new Error(\"THREE.MMDAnimationHelper.remove: accepts only THREE.SkinnedMesh or THREE.Camera or THREE.Audio instance.\");\n    }\n    if (this.configuration.sync) this._syncDuration();\n    return this;\n  }\n  /**\n   * Updates the animation.\n   *\n   * @param {Number} delta\n   * @return {MMDAnimationHelper}\n   */\n  update(delta) {\n    if (this.audioManager !== null) this.audioManager.control(delta);\n    for (let i = 0; i < this.meshes.length; i++) {\n      this._animateMesh(this.meshes[i], delta);\n    }\n    if (this.sharedPhysics) this._updateSharedPhysics(delta);\n    if (this.camera !== null) this._animateCamera(this.camera, delta);\n    return this;\n  }\n  /**\n   * Changes the pose of SkinnedMesh as VPD specifies.\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Object} vpd - VPD content parsed MMDParser\n   * @param {Object} params - (optional)\n   * @param {boolean} params.resetPose - Default is true.\n   * @param {boolean} params.ik - Default is true.\n   * @param {boolean} params.grant - Default is true.\n   * @return {MMDAnimationHelper}\n   */\n  pose(mesh, vpd, params = {}) {\n    if (params.resetPose !== false) mesh.pose();\n    const bones = mesh.skeleton.bones;\n    const boneParams = vpd.bones;\n    const boneNameDictionary = {};\n    for (let i = 0, il = bones.length; i < il; i++) {\n      boneNameDictionary[bones[i].name] = i;\n    }\n    const vector = new Vector3();\n    const quaternion = new Quaternion();\n    for (let i = 0, il = boneParams.length; i < il; i++) {\n      const boneParam = boneParams[i];\n      const boneIndex = boneNameDictionary[boneParam.name];\n      if (boneIndex === void 0) continue;\n      const bone = bones[boneIndex];\n      bone.position.add(vector.fromArray(boneParam.translation));\n      bone.quaternion.multiply(quaternion.fromArray(boneParam.quaternion));\n    }\n    mesh.updateMatrixWorld(true);\n    if (this.configuration.pmxAnimation && mesh.geometry.userData.MMD && mesh.geometry.userData.MMD.format === \"pmx\") {\n      const sortedBonesData = this._sortBoneDataArray(mesh.geometry.userData.MMD.bones.slice());\n      const ikSolver = params.ik !== false ? this._createCCDIKSolver(mesh) : null;\n      const grantSolver = params.grant !== false ? this.createGrantSolver(mesh) : null;\n      this._animatePMXMesh(mesh, sortedBonesData, ikSolver, grantSolver);\n    } else {\n      if (params.ik !== false) {\n        this._createCCDIKSolver(mesh).update();\n      }\n      if (params.grant !== false) {\n        this.createGrantSolver(mesh).update();\n      }\n    }\n    return this;\n  }\n  /**\n   * Enabes/Disables an animation feature.\n   *\n   * @param {string} key\n   * @param {boolean} enabled\n   * @return {MMDAnimationHelper}\n   */\n  enable(key, enabled) {\n    if (this.enabled[key] === void 0) {\n      throw new Error(\"THREE.MMDAnimationHelper.enable: unknown key \" + key);\n    }\n    this.enabled[key] = enabled;\n    if (key === \"physics\") {\n      for (let i = 0, il = this.meshes.length; i < il; i++) {\n        this._optimizeIK(this.meshes[i], enabled);\n      }\n    }\n    return this;\n  }\n  /**\n   * Creates an GrantSolver instance.\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @return {GrantSolver}\n   */\n  createGrantSolver(mesh) {\n    return new GrantSolver(mesh, mesh.geometry.userData.MMD.grants);\n  }\n  // private methods\n  _addMesh(mesh, params) {\n    if (this.meshes.indexOf(mesh) >= 0) {\n      throw new Error(\"THREE.MMDAnimationHelper._addMesh: SkinnedMesh '\" + mesh.name + \"' has already been added.\");\n    }\n    this.meshes.push(mesh);\n    this.objects.set(mesh, {\n      looped: false\n    });\n    this._setupMeshAnimation(mesh, params.animation);\n    if (params.physics !== false) {\n      this._setupMeshPhysics(mesh, params);\n    }\n    return this;\n  }\n  _setupCamera(camera, params) {\n    if (this.camera === camera) {\n      throw new Error(\"THREE.MMDAnimationHelper._setupCamera: Camera '\" + camera.name + \"' has already been set.\");\n    }\n    if (this.camera) this.clearCamera(this.camera);\n    this.camera = camera;\n    camera.add(this.cameraTarget);\n    this.objects.set(camera, {});\n    if (params.animation !== void 0) {\n      this._setupCameraAnimation(camera, params.animation);\n    }\n    return this;\n  }\n  _setupAudio(audio, params) {\n    if (this.audio === audio) {\n      throw new Error(\"THREE.MMDAnimationHelper._setupAudio: Audio '\" + audio.name + \"' has already been set.\");\n    }\n    if (this.audio) this.clearAudio(this.audio);\n    this.audio = audio;\n    this.audioManager = new AudioManager(audio, params);\n    this.objects.set(this.audioManager, {\n      duration: this.audioManager.duration\n    });\n    return this;\n  }\n  _removeMesh(mesh) {\n    let found = false;\n    let writeIndex = 0;\n    for (let i = 0, il = this.meshes.length; i < il; i++) {\n      if (this.meshes[i] === mesh) {\n        this.objects.delete(mesh);\n        found = true;\n        continue;\n      }\n      this.meshes[writeIndex++] = this.meshes[i];\n    }\n    if (!found) {\n      throw new Error(\"THREE.MMDAnimationHelper._removeMesh: SkinnedMesh '\" + mesh.name + \"' has not been added yet.\");\n    }\n    this.meshes.length = writeIndex;\n    return this;\n  }\n  _clearCamera(camera) {\n    if (camera !== this.camera) {\n      throw new Error(\"THREE.MMDAnimationHelper._clearCamera: Camera '\" + camera.name + \"' has not been set yet.\");\n    }\n    this.camera.remove(this.cameraTarget);\n    this.objects.delete(this.camera);\n    this.camera = null;\n    return this;\n  }\n  _clearAudio(audio) {\n    if (audio !== this.audio) {\n      throw new Error(\"THREE.MMDAnimationHelper._clearAudio: Audio '\" + audio.name + \"' has not been set yet.\");\n    }\n    this.objects.delete(this.audioManager);\n    this.audio = null;\n    this.audioManager = null;\n    return this;\n  }\n  _setupMeshAnimation(mesh, animation) {\n    const objects = this.objects.get(mesh);\n    if (animation !== void 0) {\n      const animations = Array.isArray(animation) ? animation : [animation];\n      objects.mixer = new AnimationMixer(mesh);\n      for (let i = 0, il = animations.length; i < il; i++) {\n        objects.mixer.clipAction(animations[i]).play();\n      }\n      objects.mixer.addEventListener(\"loop\", function (event) {\n        const tracks = event.action._clip.tracks;\n        if (tracks.length > 0 && tracks[0].name.slice(0, 6) !== \".bones\") return;\n        objects.looped = true;\n      });\n    }\n    objects.ikSolver = this._createCCDIKSolver(mesh);\n    objects.grantSolver = this.createGrantSolver(mesh);\n    return this;\n  }\n  _setupCameraAnimation(camera, animation) {\n    const animations = Array.isArray(animation) ? animation : [animation];\n    const objects = this.objects.get(camera);\n    objects.mixer = new AnimationMixer(camera);\n    for (let i = 0, il = animations.length; i < il; i++) {\n      objects.mixer.clipAction(animations[i]).play();\n    }\n  }\n  _setupMeshPhysics(mesh, params) {\n    const objects = this.objects.get(mesh);\n    if (params.world === void 0 && this.sharedPhysics) {\n      const masterPhysics = this._getMasterPhysics();\n      if (masterPhysics !== null) world = masterPhysics.world;\n    }\n    objects.physics = this._createMMDPhysics(mesh, params);\n    if (objects.mixer && params.animationWarmup !== false) {\n      this._animateMesh(mesh, 0);\n      objects.physics.reset();\n    }\n    objects.physics.warmup(params.warmup !== void 0 ? params.warmup : 60);\n    this._optimizeIK(mesh, true);\n  }\n  _animateMesh(mesh, delta) {\n    const objects = this.objects.get(mesh);\n    const mixer = objects.mixer;\n    const ikSolver = objects.ikSolver;\n    const grantSolver = objects.grantSolver;\n    const physics = objects.physics;\n    const looped = objects.looped;\n    if (mixer && this.enabled.animation) {\n      this._restoreBones(mesh);\n      mixer.update(delta);\n      this._saveBones(mesh);\n      if (this.configuration.pmxAnimation && mesh.geometry.userData.MMD && mesh.geometry.userData.MMD.format === \"pmx\") {\n        if (!objects.sortedBonesData) objects.sortedBonesData = this._sortBoneDataArray(mesh.geometry.userData.MMD.bones.slice());\n        this._animatePMXMesh(mesh, objects.sortedBonesData, ikSolver && this.enabled.ik ? ikSolver : null, grantSolver && this.enabled.grant ? grantSolver : null);\n      } else {\n        if (ikSolver && this.enabled.ik) {\n          mesh.updateMatrixWorld(true);\n          ikSolver.update();\n        }\n        if (grantSolver && this.enabled.grant) {\n          grantSolver.update();\n        }\n      }\n    }\n    if (looped === true && this.enabled.physics) {\n      if (physics && this.configuration.resetPhysicsOnLoop) physics.reset();\n      objects.looped = false;\n    }\n    if (physics && this.enabled.physics && !this.sharedPhysics) {\n      this.onBeforePhysics(mesh);\n      physics.update(delta);\n    }\n  }\n  // Sort bones in order by 1. transformationClass and 2. bone index.\n  // In PMX animation system, bone transformations should be processed\n  // in this order.\n  _sortBoneDataArray(boneDataArray) {\n    return boneDataArray.sort(function (a, b) {\n      if (a.transformationClass !== b.transformationClass) {\n        return a.transformationClass - b.transformationClass;\n      } else {\n        return a.index - b.index;\n      }\n    });\n  }\n  // PMX Animation system is a bit too complex and doesn't great match to\n  // Three.js Animation system. This method attempts to simulate it as much as\n  // possible but doesn't perfectly simulate.\n  // This method is more costly than the regular one so\n  // you are recommended to set constructor parameter \"pmxAnimation: true\"\n  // only if your PMX model animation doesn't work well.\n  // If you need better method you would be required to write your own.\n  _animatePMXMesh(mesh, sortedBonesData, ikSolver, grantSolver) {\n    _quaternionIndex = 0;\n    _grantResultMap.clear();\n    for (let i = 0, il = sortedBonesData.length; i < il; i++) {\n      updateOne(mesh, sortedBonesData[i].index, ikSolver, grantSolver);\n    }\n    mesh.updateMatrixWorld(true);\n    return this;\n  }\n  _animateCamera(camera, delta) {\n    const mixer = this.objects.get(camera).mixer;\n    if (mixer && this.enabled.cameraAnimation) {\n      mixer.update(delta);\n      camera.updateProjectionMatrix();\n      camera.up.set(0, 1, 0);\n      camera.up.applyQuaternion(camera.quaternion);\n      camera.lookAt(this.cameraTarget.position);\n    }\n  }\n  _optimizeIK(mesh, physicsEnabled) {\n    const iks = mesh.geometry.userData.MMD.iks;\n    const bones = mesh.geometry.userData.MMD.bones;\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      const links = ik.links;\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        const link = links[j];\n        if (physicsEnabled === true) {\n          link.enabled = bones[link.index].rigidBodyType > 0 ? false : true;\n        } else {\n          link.enabled = true;\n        }\n      }\n    }\n  }\n  _createCCDIKSolver(mesh) {\n    if (CCDIKSolver === void 0) {\n      throw new Error(\"THREE.MMDAnimationHelper: Import CCDIKSolver.\");\n    }\n    return new CCDIKSolver(mesh, mesh.geometry.userData.MMD.iks);\n  }\n  _createMMDPhysics(mesh, params) {\n    if (MMDPhysics === void 0) {\n      throw new Error(\"THREE.MMDPhysics: Import MMDPhysics.\");\n    }\n    return new MMDPhysics(mesh, mesh.geometry.userData.MMD.rigidBodies, mesh.geometry.userData.MMD.constraints, params);\n  }\n  /*\n   * Detects the longest duration and then sets it to them to sync.\n   * TODO: Not to access private properties ( ._actions and ._clip )\n   */\n  _syncDuration() {\n    let max = 0;\n    const objects = this.objects;\n    const meshes = this.meshes;\n    const camera = this.camera;\n    const audioManager = this.audioManager;\n    for (let i = 0, il = meshes.length; i < il; i++) {\n      const mixer = this.objects.get(meshes[i]).mixer;\n      if (mixer === void 0) continue;\n      for (let j = 0; j < mixer._actions.length; j++) {\n        const clip = mixer._actions[j]._clip;\n        if (!objects.has(clip)) {\n          objects.set(clip, {\n            duration: clip.duration\n          });\n        }\n        max = Math.max(max, objects.get(clip).duration);\n      }\n    }\n    if (camera !== null) {\n      const mixer = this.objects.get(camera).mixer;\n      if (mixer !== void 0) {\n        for (let i = 0, il = mixer._actions.length; i < il; i++) {\n          const clip = mixer._actions[i]._clip;\n          if (!objects.has(clip)) {\n            objects.set(clip, {\n              duration: clip.duration\n            });\n          }\n          max = Math.max(max, objects.get(clip).duration);\n        }\n      }\n    }\n    if (audioManager !== null) {\n      max = Math.max(max, objects.get(audioManager).duration);\n    }\n    max += this.configuration.afterglow;\n    for (let i = 0, il = this.meshes.length; i < il; i++) {\n      const mixer = this.objects.get(this.meshes[i]).mixer;\n      if (mixer === void 0) continue;\n      for (let j = 0, jl = mixer._actions.length; j < jl; j++) {\n        mixer._actions[j]._clip.duration = max;\n      }\n    }\n    if (camera !== null) {\n      const mixer = this.objects.get(camera).mixer;\n      if (mixer !== void 0) {\n        for (let i = 0, il = mixer._actions.length; i < il; i++) {\n          mixer._actions[i]._clip.duration = max;\n        }\n      }\n    }\n    if (audioManager !== null) {\n      audioManager.duration = max;\n    }\n  }\n  // workaround\n  _updatePropertyMixersBuffer(mesh) {\n    const mixer = this.objects.get(mesh).mixer;\n    const propertyMixers = mixer._bindings;\n    const accuIndex = mixer._accuIndex;\n    for (let i = 0, il = propertyMixers.length; i < il; i++) {\n      const propertyMixer = propertyMixers[i];\n      const buffer = propertyMixer.buffer;\n      const stride = propertyMixer.valueSize;\n      const offset = (accuIndex + 1) * stride;\n      propertyMixer.binding.getValue(buffer, offset);\n    }\n  }\n  /*\n   * Avoiding these two issues by restore/save bones before/after mixer animation.\n   *\n   * 1. PropertyMixer used by AnimationMixer holds cache value in .buffer.\n   *    Calculating IK, Grant, and Physics after mixer animation can break\n   *    the cache coherency.\n   *\n   * 2. Applying Grant two or more times without reset the posing breaks model.\n   */\n  _saveBones(mesh) {\n    const objects = this.objects.get(mesh);\n    const bones = mesh.skeleton.bones;\n    let backupBones = objects.backupBones;\n    if (backupBones === void 0) {\n      backupBones = new Float32Array(bones.length * 7);\n      objects.backupBones = backupBones;\n    }\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      bone.position.toArray(backupBones, i * 7);\n      bone.quaternion.toArray(backupBones, i * 7 + 3);\n    }\n  }\n  _restoreBones(mesh) {\n    const objects = this.objects.get(mesh);\n    const backupBones = objects.backupBones;\n    if (backupBones === void 0) return;\n    const bones = mesh.skeleton.bones;\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      bone.position.fromArray(backupBones, i * 7);\n      bone.quaternion.fromArray(backupBones, i * 7 + 3);\n    }\n  }\n  // experimental\n  _getMasterPhysics() {\n    if (this.masterPhysics !== null) return this.masterPhysics;\n    for (let i = 0, il = this.meshes.length; i < il; i++) {\n      const physics = this.meshes[i].physics;\n      if (physics !== void 0 && physics !== null) {\n        this.masterPhysics = physics;\n        return this.masterPhysics;\n      }\n    }\n    return null;\n  }\n  _updateSharedPhysics(delta) {\n    if (this.meshes.length === 0 || !this.enabled.physics || !this.sharedPhysics) return;\n    const physics = this._getMasterPhysics();\n    if (physics === null) return;\n    for (let i = 0, il = this.meshes.length; i < il; i++) {\n      const p = this.meshes[i].physics;\n      if (p !== null && p !== void 0) {\n        p.updateRigidBodies();\n      }\n    }\n    physics.stepSimulation(delta);\n    for (let i = 0, il = this.meshes.length; i < il; i++) {\n      const p = this.meshes[i].physics;\n      if (p !== null && p !== void 0) {\n        p.updateBones();\n      }\n    }\n  }\n}\nconst _quaternions = [];\nlet _quaternionIndex = 0;\nfunction getQuaternion() {\n  if (_quaternionIndex >= _quaternions.length) {\n    _quaternions.push(new Quaternion());\n  }\n  return _quaternions[_quaternionIndex++];\n}\nconst _grantResultMap = /* @__PURE__ */new Map();\nfunction updateOne(mesh, boneIndex, ikSolver, grantSolver) {\n  const bones = mesh.skeleton.bones;\n  const bonesData = mesh.geometry.userData.MMD.bones;\n  const boneData = bonesData[boneIndex];\n  const bone = bones[boneIndex];\n  if (_grantResultMap.has(boneIndex)) return;\n  const quaternion = getQuaternion();\n  _grantResultMap.set(boneIndex, quaternion.copy(bone.quaternion));\n  if (grantSolver && boneData.grant && !boneData.grant.isLocal && boneData.grant.affectRotation) {\n    const parentIndex = boneData.grant.parentIndex;\n    const ratio = boneData.grant.ratio;\n    if (!_grantResultMap.has(parentIndex)) {\n      updateOne(mesh, parentIndex, ikSolver, grantSolver);\n    }\n    grantSolver.addGrantRotation(bone, _grantResultMap.get(parentIndex), ratio);\n  }\n  if (ikSolver && boneData.ik) {\n    mesh.updateMatrixWorld(true);\n    ikSolver.updateOne(boneData.ik);\n    const links = boneData.ik.links;\n    for (let i = 0, il = links.length; i < il; i++) {\n      const link = links[i];\n      if (link.enabled === false) continue;\n      const linkIndex = link.index;\n      if (_grantResultMap.has(linkIndex)) {\n        _grantResultMap.set(linkIndex, _grantResultMap.get(linkIndex).copy(bones[linkIndex].quaternion));\n      }\n    }\n  }\n  quaternion.copy(bone.quaternion);\n}\nclass AudioManager {\n  /**\n   * @param {THREE.Audio} audio\n   * @param {Object} params - (optional)\n   * @param {Nuumber} params.delayTime\n   */\n  constructor(audio, params = {}) {\n    this.audio = audio;\n    this.elapsedTime = 0;\n    this.currentTime = 0;\n    this.delayTime = params.delayTime !== void 0 ? params.delayTime : 0;\n    this.audioDuration = this.audio.buffer.duration;\n    this.duration = this.audioDuration + this.delayTime;\n  }\n  /**\n   * @param {Number} delta\n   * @return {AudioManager}\n   */\n  control(delta) {\n    this.elapsed += delta;\n    this.currentTime += delta;\n    if (this._shouldStopAudio()) this.audio.stop();\n    if (this._shouldStartAudio()) this.audio.play();\n    return this;\n  }\n  // private methods\n  _shouldStartAudio() {\n    if (this.audio.isPlaying) return false;\n    while (this.currentTime >= this.duration) {\n      this.currentTime -= this.duration;\n    }\n    if (this.currentTime < this.delayTime) return false;\n    if (this.currentTime - this.delayTime > this.audioDuration) return false;\n    return true;\n  }\n  _shouldStopAudio() {\n    return this.audio.isPlaying && this.currentTime >= this.duration;\n  }\n}\nconst _q = /* @__PURE__ */new Quaternion();\nclass GrantSolver {\n  constructor(mesh, grants = []) {\n    this.mesh = mesh;\n    this.grants = grants;\n  }\n  /**\n   * Solve all the grant bones\n   * @return {GrantSolver}\n   */\n  update() {\n    const grants = this.grants;\n    for (let i = 0, il = grants.length; i < il; i++) {\n      this.updateOne(grants[i]);\n    }\n    return this;\n  }\n  /**\n   * Solve a grant bone\n   * @param {Object} grant - grant parameter\n   * @return {GrantSolver}\n   */\n  updateOne(grant) {\n    const bones = this.mesh.skeleton.bones;\n    const bone = bones[grant.index];\n    const parentBone = bones[grant.parentIndex];\n    if (grant.isLocal) {\n      if (grant.affectPosition) ;\n      if (grant.affectRotation) ;\n    } else {\n      if (grant.affectPosition) ;\n      if (grant.affectRotation) {\n        this.addGrantRotation(bone, parentBone.quaternion, grant.ratio);\n      }\n    }\n    return this;\n  }\n  addGrantRotation(bone, q, ratio) {\n    _q.set(0, 0, 0, 1);\n    _q.slerp(q, ratio);\n    bone.quaternion.multiply(_q);\n    return this;\n  }\n}\nexport { MMDAnimationHelper };","map":{"version":3,"names":["Object3D","Vector3","Quaternion","AnimationMixer","CCDIKSolver","MMDPhysics","MMDAnimationHelper","constructor","params","meshes","camera","cameraTarget","name","audio","audioManager","objects","WeakMap","configuration","sync","afterglow","resetPhysicsOnLoop","pmxAnimation","enabled","animation","ik","grant","physics","cameraAnimation","onBeforePhysics","sharedPhysics","masterPhysics","add","object","isSkinnedMesh","_addMesh","isCamera","_setupCamera","type","_setupAudio","Error","_syncDuration","remove","_removeMesh","_clearCamera","_clearAudio","update","delta","control","i","length","_animateMesh","_updateSharedPhysics","_animateCamera","pose","mesh","vpd","resetPose","bones","skeleton","boneParams","boneNameDictionary","il","vector","quaternion","boneParam","boneIndex","bone","position","fromArray","translation","multiply","updateMatrixWorld","geometry","userData","MMD","format","sortedBonesData","_sortBoneDataArray","slice","ikSolver","_createCCDIKSolver","grantSolver","createGrantSolver","_animatePMXMesh","enable","key","_optimizeIK","GrantSolver","grants","indexOf","push","set","looped","_setupMeshAnimation","_setupMeshPhysics","clearCamera","_setupCameraAnimation","clearAudio","AudioManager","duration","found","writeIndex","delete","get","animations","Array","isArray","mixer","clipAction","play","addEventListener","event","tracks","action","_clip","world","_getMasterPhysics","_createMMDPhysics","animationWarmup","reset","warmup","_restoreBones","_saveBones","boneDataArray","sort","a","b","transformationClass","index","_quaternionIndex","_grantResultMap","clear","updateOne","updateProjectionMatrix","up","applyQuaternion","lookAt","physicsEnabled","iks","links","j","jl","link","rigidBodyType","rigidBodies","constraints","max","_actions","clip","has","Math","_updatePropertyMixersBuffer","propertyMixers","_bindings","accuIndex","_accuIndex","propertyMixer","buffer","stride","valueSize","offset","binding","getValue","backupBones","Float32Array","toArray","p","updateRigidBodies","stepSimulation","updateBones","_quaternions","getQuaternion","Map","bonesData","boneData","copy","isLocal","affectRotation","parentIndex","ratio","addGrantRotation","linkIndex","elapsedTime","currentTime","delayTime","audioDuration","elapsed","_shouldStopAudio","stop","_shouldStartAudio","isPlaying","_q","parentBone","affectPosition","q","slerp"],"sources":["C:/Users/srk/Downloads/arq_phantom_clone/node_modules/three-stdlib/animation/MMDAnimationHelper.js"],"sourcesContent":["import { Object3D, Vector3, Quaternion, AnimationMixer } from \"three\";\nimport { CCDIKSolver } from \"./CCDIKSolver.js\";\nimport { MMDPhysics } from \"./MMDPhysics.js\";\nclass MMDAnimationHelper {\n  /**\n   * @param {Object} params - (optional)\n   * @param {boolean} params.sync - Whether animation durations of added objects are synched. Default is true.\n   * @param {Number} params.afterglow - Default is 0.0.\n   * @param {boolean} params.resetPhysicsOnLoop - Default is true.\n   */\n  constructor(params = {}) {\n    this.meshes = [];\n    this.camera = null;\n    this.cameraTarget = new Object3D();\n    this.cameraTarget.name = \"target\";\n    this.audio = null;\n    this.audioManager = null;\n    this.objects = /* @__PURE__ */ new WeakMap();\n    this.configuration = {\n      sync: params.sync !== void 0 ? params.sync : true,\n      afterglow: params.afterglow !== void 0 ? params.afterglow : 0,\n      resetPhysicsOnLoop: params.resetPhysicsOnLoop !== void 0 ? params.resetPhysicsOnLoop : true,\n      pmxAnimation: params.pmxAnimation !== void 0 ? params.pmxAnimation : false\n    };\n    this.enabled = {\n      animation: true,\n      ik: true,\n      grant: true,\n      physics: true,\n      cameraAnimation: true\n    };\n    this.onBeforePhysics = function() {\n    };\n    this.sharedPhysics = false;\n    this.masterPhysics = null;\n  }\n  /**\n   * Adds an Three.js Object to helper and setups animation.\n   * The anmation durations of added objects are synched\n   * if this.configuration.sync is true.\n   *\n   * @param {THREE.SkinnedMesh|THREE.Camera|THREE.Audio} object\n   * @param {Object} params - (optional)\n   * @param {THREE.AnimationClip|Array<THREE.AnimationClip>} params.animation - Only for THREE.SkinnedMesh and THREE.Camera. Default is undefined.\n   * @param {boolean} params.physics - Only for THREE.SkinnedMesh. Default is true.\n   * @param {Integer} params.warmup - Only for THREE.SkinnedMesh and physics is true. Default is 60.\n   * @param {Number} params.unitStep - Only for THREE.SkinnedMesh and physics is true. Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Only for THREE.SkinnedMesh and physics is true. Default is 3.\n   * @param {Vector3} params.gravity - Only for THREE.SkinnedMesh and physics is true. Default ( 0, - 9.8 * 10, 0 ).\n   * @param {Number} params.delayTime - Only for THREE.Audio. Default is 0.0.\n   * @return {MMDAnimationHelper}\n   */\n  add(object, params = {}) {\n    if (object.isSkinnedMesh) {\n      this._addMesh(object, params);\n    } else if (object.isCamera) {\n      this._setupCamera(object, params);\n    } else if (object.type === \"Audio\") {\n      this._setupAudio(object, params);\n    } else {\n      throw new Error(\n        \"THREE.MMDAnimationHelper.add: accepts only THREE.SkinnedMesh or THREE.Camera or THREE.Audio instance.\"\n      );\n    }\n    if (this.configuration.sync)\n      this._syncDuration();\n    return this;\n  }\n  /**\n   * Removes an Three.js Object from helper.\n   *\n   * @param {THREE.SkinnedMesh|THREE.Camera|THREE.Audio} object\n   * @return {MMDAnimationHelper}\n   */\n  remove(object) {\n    if (object.isSkinnedMesh) {\n      this._removeMesh(object);\n    } else if (object.isCamera) {\n      this._clearCamera(object);\n    } else if (object.type === \"Audio\") {\n      this._clearAudio(object);\n    } else {\n      throw new Error(\n        \"THREE.MMDAnimationHelper.remove: accepts only THREE.SkinnedMesh or THREE.Camera or THREE.Audio instance.\"\n      );\n    }\n    if (this.configuration.sync)\n      this._syncDuration();\n    return this;\n  }\n  /**\n   * Updates the animation.\n   *\n   * @param {Number} delta\n   * @return {MMDAnimationHelper}\n   */\n  update(delta) {\n    if (this.audioManager !== null)\n      this.audioManager.control(delta);\n    for (let i = 0; i < this.meshes.length; i++) {\n      this._animateMesh(this.meshes[i], delta);\n    }\n    if (this.sharedPhysics)\n      this._updateSharedPhysics(delta);\n    if (this.camera !== null)\n      this._animateCamera(this.camera, delta);\n    return this;\n  }\n  /**\n   * Changes the pose of SkinnedMesh as VPD specifies.\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Object} vpd - VPD content parsed MMDParser\n   * @param {Object} params - (optional)\n   * @param {boolean} params.resetPose - Default is true.\n   * @param {boolean} params.ik - Default is true.\n   * @param {boolean} params.grant - Default is true.\n   * @return {MMDAnimationHelper}\n   */\n  pose(mesh, vpd, params = {}) {\n    if (params.resetPose !== false)\n      mesh.pose();\n    const bones = mesh.skeleton.bones;\n    const boneParams = vpd.bones;\n    const boneNameDictionary = {};\n    for (let i = 0, il = bones.length; i < il; i++) {\n      boneNameDictionary[bones[i].name] = i;\n    }\n    const vector = new Vector3();\n    const quaternion = new Quaternion();\n    for (let i = 0, il = boneParams.length; i < il; i++) {\n      const boneParam = boneParams[i];\n      const boneIndex = boneNameDictionary[boneParam.name];\n      if (boneIndex === void 0)\n        continue;\n      const bone = bones[boneIndex];\n      bone.position.add(vector.fromArray(boneParam.translation));\n      bone.quaternion.multiply(quaternion.fromArray(boneParam.quaternion));\n    }\n    mesh.updateMatrixWorld(true);\n    if (this.configuration.pmxAnimation && mesh.geometry.userData.MMD && mesh.geometry.userData.MMD.format === \"pmx\") {\n      const sortedBonesData = this._sortBoneDataArray(mesh.geometry.userData.MMD.bones.slice());\n      const ikSolver = params.ik !== false ? this._createCCDIKSolver(mesh) : null;\n      const grantSolver = params.grant !== false ? this.createGrantSolver(mesh) : null;\n      this._animatePMXMesh(mesh, sortedBonesData, ikSolver, grantSolver);\n    } else {\n      if (params.ik !== false) {\n        this._createCCDIKSolver(mesh).update();\n      }\n      if (params.grant !== false) {\n        this.createGrantSolver(mesh).update();\n      }\n    }\n    return this;\n  }\n  /**\n   * Enabes/Disables an animation feature.\n   *\n   * @param {string} key\n   * @param {boolean} enabled\n   * @return {MMDAnimationHelper}\n   */\n  enable(key, enabled) {\n    if (this.enabled[key] === void 0) {\n      throw new Error(\"THREE.MMDAnimationHelper.enable: unknown key \" + key);\n    }\n    this.enabled[key] = enabled;\n    if (key === \"physics\") {\n      for (let i = 0, il = this.meshes.length; i < il; i++) {\n        this._optimizeIK(this.meshes[i], enabled);\n      }\n    }\n    return this;\n  }\n  /**\n   * Creates an GrantSolver instance.\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @return {GrantSolver}\n   */\n  createGrantSolver(mesh) {\n    return new GrantSolver(mesh, mesh.geometry.userData.MMD.grants);\n  }\n  // private methods\n  _addMesh(mesh, params) {\n    if (this.meshes.indexOf(mesh) >= 0) {\n      throw new Error(\"THREE.MMDAnimationHelper._addMesh: SkinnedMesh '\" + mesh.name + \"' has already been added.\");\n    }\n    this.meshes.push(mesh);\n    this.objects.set(mesh, { looped: false });\n    this._setupMeshAnimation(mesh, params.animation);\n    if (params.physics !== false) {\n      this._setupMeshPhysics(mesh, params);\n    }\n    return this;\n  }\n  _setupCamera(camera, params) {\n    if (this.camera === camera) {\n      throw new Error(\"THREE.MMDAnimationHelper._setupCamera: Camera '\" + camera.name + \"' has already been set.\");\n    }\n    if (this.camera)\n      this.clearCamera(this.camera);\n    this.camera = camera;\n    camera.add(this.cameraTarget);\n    this.objects.set(camera, {});\n    if (params.animation !== void 0) {\n      this._setupCameraAnimation(camera, params.animation);\n    }\n    return this;\n  }\n  _setupAudio(audio, params) {\n    if (this.audio === audio) {\n      throw new Error(\"THREE.MMDAnimationHelper._setupAudio: Audio '\" + audio.name + \"' has already been set.\");\n    }\n    if (this.audio)\n      this.clearAudio(this.audio);\n    this.audio = audio;\n    this.audioManager = new AudioManager(audio, params);\n    this.objects.set(this.audioManager, {\n      duration: this.audioManager.duration\n    });\n    return this;\n  }\n  _removeMesh(mesh) {\n    let found = false;\n    let writeIndex = 0;\n    for (let i = 0, il = this.meshes.length; i < il; i++) {\n      if (this.meshes[i] === mesh) {\n        this.objects.delete(mesh);\n        found = true;\n        continue;\n      }\n      this.meshes[writeIndex++] = this.meshes[i];\n    }\n    if (!found) {\n      throw new Error(\n        \"THREE.MMDAnimationHelper._removeMesh: SkinnedMesh '\" + mesh.name + \"' has not been added yet.\"\n      );\n    }\n    this.meshes.length = writeIndex;\n    return this;\n  }\n  _clearCamera(camera) {\n    if (camera !== this.camera) {\n      throw new Error(\"THREE.MMDAnimationHelper._clearCamera: Camera '\" + camera.name + \"' has not been set yet.\");\n    }\n    this.camera.remove(this.cameraTarget);\n    this.objects.delete(this.camera);\n    this.camera = null;\n    return this;\n  }\n  _clearAudio(audio) {\n    if (audio !== this.audio) {\n      throw new Error(\"THREE.MMDAnimationHelper._clearAudio: Audio '\" + audio.name + \"' has not been set yet.\");\n    }\n    this.objects.delete(this.audioManager);\n    this.audio = null;\n    this.audioManager = null;\n    return this;\n  }\n  _setupMeshAnimation(mesh, animation) {\n    const objects = this.objects.get(mesh);\n    if (animation !== void 0) {\n      const animations = Array.isArray(animation) ? animation : [animation];\n      objects.mixer = new AnimationMixer(mesh);\n      for (let i = 0, il = animations.length; i < il; i++) {\n        objects.mixer.clipAction(animations[i]).play();\n      }\n      objects.mixer.addEventListener(\"loop\", function(event) {\n        const tracks = event.action._clip.tracks;\n        if (tracks.length > 0 && tracks[0].name.slice(0, 6) !== \".bones\")\n          return;\n        objects.looped = true;\n      });\n    }\n    objects.ikSolver = this._createCCDIKSolver(mesh);\n    objects.grantSolver = this.createGrantSolver(mesh);\n    return this;\n  }\n  _setupCameraAnimation(camera, animation) {\n    const animations = Array.isArray(animation) ? animation : [animation];\n    const objects = this.objects.get(camera);\n    objects.mixer = new AnimationMixer(camera);\n    for (let i = 0, il = animations.length; i < il; i++) {\n      objects.mixer.clipAction(animations[i]).play();\n    }\n  }\n  _setupMeshPhysics(mesh, params) {\n    const objects = this.objects.get(mesh);\n    if (params.world === void 0 && this.sharedPhysics) {\n      const masterPhysics = this._getMasterPhysics();\n      if (masterPhysics !== null)\n        world = masterPhysics.world;\n    }\n    objects.physics = this._createMMDPhysics(mesh, params);\n    if (objects.mixer && params.animationWarmup !== false) {\n      this._animateMesh(mesh, 0);\n      objects.physics.reset();\n    }\n    objects.physics.warmup(params.warmup !== void 0 ? params.warmup : 60);\n    this._optimizeIK(mesh, true);\n  }\n  _animateMesh(mesh, delta) {\n    const objects = this.objects.get(mesh);\n    const mixer = objects.mixer;\n    const ikSolver = objects.ikSolver;\n    const grantSolver = objects.grantSolver;\n    const physics = objects.physics;\n    const looped = objects.looped;\n    if (mixer && this.enabled.animation) {\n      this._restoreBones(mesh);\n      mixer.update(delta);\n      this._saveBones(mesh);\n      if (this.configuration.pmxAnimation && mesh.geometry.userData.MMD && mesh.geometry.userData.MMD.format === \"pmx\") {\n        if (!objects.sortedBonesData)\n          objects.sortedBonesData = this._sortBoneDataArray(mesh.geometry.userData.MMD.bones.slice());\n        this._animatePMXMesh(\n          mesh,\n          objects.sortedBonesData,\n          ikSolver && this.enabled.ik ? ikSolver : null,\n          grantSolver && this.enabled.grant ? grantSolver : null\n        );\n      } else {\n        if (ikSolver && this.enabled.ik) {\n          mesh.updateMatrixWorld(true);\n          ikSolver.update();\n        }\n        if (grantSolver && this.enabled.grant) {\n          grantSolver.update();\n        }\n      }\n    }\n    if (looped === true && this.enabled.physics) {\n      if (physics && this.configuration.resetPhysicsOnLoop)\n        physics.reset();\n      objects.looped = false;\n    }\n    if (physics && this.enabled.physics && !this.sharedPhysics) {\n      this.onBeforePhysics(mesh);\n      physics.update(delta);\n    }\n  }\n  // Sort bones in order by 1. transformationClass and 2. bone index.\n  // In PMX animation system, bone transformations should be processed\n  // in this order.\n  _sortBoneDataArray(boneDataArray) {\n    return boneDataArray.sort(function(a, b) {\n      if (a.transformationClass !== b.transformationClass) {\n        return a.transformationClass - b.transformationClass;\n      } else {\n        return a.index - b.index;\n      }\n    });\n  }\n  // PMX Animation system is a bit too complex and doesn't great match to\n  // Three.js Animation system. This method attempts to simulate it as much as\n  // possible but doesn't perfectly simulate.\n  // This method is more costly than the regular one so\n  // you are recommended to set constructor parameter \"pmxAnimation: true\"\n  // only if your PMX model animation doesn't work well.\n  // If you need better method you would be required to write your own.\n  _animatePMXMesh(mesh, sortedBonesData, ikSolver, grantSolver) {\n    _quaternionIndex = 0;\n    _grantResultMap.clear();\n    for (let i = 0, il = sortedBonesData.length; i < il; i++) {\n      updateOne(mesh, sortedBonesData[i].index, ikSolver, grantSolver);\n    }\n    mesh.updateMatrixWorld(true);\n    return this;\n  }\n  _animateCamera(camera, delta) {\n    const mixer = this.objects.get(camera).mixer;\n    if (mixer && this.enabled.cameraAnimation) {\n      mixer.update(delta);\n      camera.updateProjectionMatrix();\n      camera.up.set(0, 1, 0);\n      camera.up.applyQuaternion(camera.quaternion);\n      camera.lookAt(this.cameraTarget.position);\n    }\n  }\n  _optimizeIK(mesh, physicsEnabled) {\n    const iks = mesh.geometry.userData.MMD.iks;\n    const bones = mesh.geometry.userData.MMD.bones;\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      const links = ik.links;\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        const link = links[j];\n        if (physicsEnabled === true) {\n          link.enabled = bones[link.index].rigidBodyType > 0 ? false : true;\n        } else {\n          link.enabled = true;\n        }\n      }\n    }\n  }\n  _createCCDIKSolver(mesh) {\n    if (CCDIKSolver === void 0) {\n      throw new Error(\"THREE.MMDAnimationHelper: Import CCDIKSolver.\");\n    }\n    return new CCDIKSolver(mesh, mesh.geometry.userData.MMD.iks);\n  }\n  _createMMDPhysics(mesh, params) {\n    if (MMDPhysics === void 0) {\n      throw new Error(\"THREE.MMDPhysics: Import MMDPhysics.\");\n    }\n    return new MMDPhysics(mesh, mesh.geometry.userData.MMD.rigidBodies, mesh.geometry.userData.MMD.constraints, params);\n  }\n  /*\n   * Detects the longest duration and then sets it to them to sync.\n   * TODO: Not to access private properties ( ._actions and ._clip )\n   */\n  _syncDuration() {\n    let max = 0;\n    const objects = this.objects;\n    const meshes = this.meshes;\n    const camera = this.camera;\n    const audioManager = this.audioManager;\n    for (let i = 0, il = meshes.length; i < il; i++) {\n      const mixer = this.objects.get(meshes[i]).mixer;\n      if (mixer === void 0)\n        continue;\n      for (let j = 0; j < mixer._actions.length; j++) {\n        const clip = mixer._actions[j]._clip;\n        if (!objects.has(clip)) {\n          objects.set(clip, {\n            duration: clip.duration\n          });\n        }\n        max = Math.max(max, objects.get(clip).duration);\n      }\n    }\n    if (camera !== null) {\n      const mixer = this.objects.get(camera).mixer;\n      if (mixer !== void 0) {\n        for (let i = 0, il = mixer._actions.length; i < il; i++) {\n          const clip = mixer._actions[i]._clip;\n          if (!objects.has(clip)) {\n            objects.set(clip, {\n              duration: clip.duration\n            });\n          }\n          max = Math.max(max, objects.get(clip).duration);\n        }\n      }\n    }\n    if (audioManager !== null) {\n      max = Math.max(max, objects.get(audioManager).duration);\n    }\n    max += this.configuration.afterglow;\n    for (let i = 0, il = this.meshes.length; i < il; i++) {\n      const mixer = this.objects.get(this.meshes[i]).mixer;\n      if (mixer === void 0)\n        continue;\n      for (let j = 0, jl = mixer._actions.length; j < jl; j++) {\n        mixer._actions[j]._clip.duration = max;\n      }\n    }\n    if (camera !== null) {\n      const mixer = this.objects.get(camera).mixer;\n      if (mixer !== void 0) {\n        for (let i = 0, il = mixer._actions.length; i < il; i++) {\n          mixer._actions[i]._clip.duration = max;\n        }\n      }\n    }\n    if (audioManager !== null) {\n      audioManager.duration = max;\n    }\n  }\n  // workaround\n  _updatePropertyMixersBuffer(mesh) {\n    const mixer = this.objects.get(mesh).mixer;\n    const propertyMixers = mixer._bindings;\n    const accuIndex = mixer._accuIndex;\n    for (let i = 0, il = propertyMixers.length; i < il; i++) {\n      const propertyMixer = propertyMixers[i];\n      const buffer = propertyMixer.buffer;\n      const stride = propertyMixer.valueSize;\n      const offset = (accuIndex + 1) * stride;\n      propertyMixer.binding.getValue(buffer, offset);\n    }\n  }\n  /*\n   * Avoiding these two issues by restore/save bones before/after mixer animation.\n   *\n   * 1. PropertyMixer used by AnimationMixer holds cache value in .buffer.\n   *    Calculating IK, Grant, and Physics after mixer animation can break\n   *    the cache coherency.\n   *\n   * 2. Applying Grant two or more times without reset the posing breaks model.\n   */\n  _saveBones(mesh) {\n    const objects = this.objects.get(mesh);\n    const bones = mesh.skeleton.bones;\n    let backupBones = objects.backupBones;\n    if (backupBones === void 0) {\n      backupBones = new Float32Array(bones.length * 7);\n      objects.backupBones = backupBones;\n    }\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      bone.position.toArray(backupBones, i * 7);\n      bone.quaternion.toArray(backupBones, i * 7 + 3);\n    }\n  }\n  _restoreBones(mesh) {\n    const objects = this.objects.get(mesh);\n    const backupBones = objects.backupBones;\n    if (backupBones === void 0)\n      return;\n    const bones = mesh.skeleton.bones;\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      bone.position.fromArray(backupBones, i * 7);\n      bone.quaternion.fromArray(backupBones, i * 7 + 3);\n    }\n  }\n  // experimental\n  _getMasterPhysics() {\n    if (this.masterPhysics !== null)\n      return this.masterPhysics;\n    for (let i = 0, il = this.meshes.length; i < il; i++) {\n      const physics = this.meshes[i].physics;\n      if (physics !== void 0 && physics !== null) {\n        this.masterPhysics = physics;\n        return this.masterPhysics;\n      }\n    }\n    return null;\n  }\n  _updateSharedPhysics(delta) {\n    if (this.meshes.length === 0 || !this.enabled.physics || !this.sharedPhysics)\n      return;\n    const physics = this._getMasterPhysics();\n    if (physics === null)\n      return;\n    for (let i = 0, il = this.meshes.length; i < il; i++) {\n      const p = this.meshes[i].physics;\n      if (p !== null && p !== void 0) {\n        p.updateRigidBodies();\n      }\n    }\n    physics.stepSimulation(delta);\n    for (let i = 0, il = this.meshes.length; i < il; i++) {\n      const p = this.meshes[i].physics;\n      if (p !== null && p !== void 0) {\n        p.updateBones();\n      }\n    }\n  }\n}\nconst _quaternions = [];\nlet _quaternionIndex = 0;\nfunction getQuaternion() {\n  if (_quaternionIndex >= _quaternions.length) {\n    _quaternions.push(new Quaternion());\n  }\n  return _quaternions[_quaternionIndex++];\n}\nconst _grantResultMap = /* @__PURE__ */ new Map();\nfunction updateOne(mesh, boneIndex, ikSolver, grantSolver) {\n  const bones = mesh.skeleton.bones;\n  const bonesData = mesh.geometry.userData.MMD.bones;\n  const boneData = bonesData[boneIndex];\n  const bone = bones[boneIndex];\n  if (_grantResultMap.has(boneIndex))\n    return;\n  const quaternion = getQuaternion();\n  _grantResultMap.set(boneIndex, quaternion.copy(bone.quaternion));\n  if (grantSolver && boneData.grant && !boneData.grant.isLocal && boneData.grant.affectRotation) {\n    const parentIndex = boneData.grant.parentIndex;\n    const ratio = boneData.grant.ratio;\n    if (!_grantResultMap.has(parentIndex)) {\n      updateOne(mesh, parentIndex, ikSolver, grantSolver);\n    }\n    grantSolver.addGrantRotation(bone, _grantResultMap.get(parentIndex), ratio);\n  }\n  if (ikSolver && boneData.ik) {\n    mesh.updateMatrixWorld(true);\n    ikSolver.updateOne(boneData.ik);\n    const links = boneData.ik.links;\n    for (let i = 0, il = links.length; i < il; i++) {\n      const link = links[i];\n      if (link.enabled === false)\n        continue;\n      const linkIndex = link.index;\n      if (_grantResultMap.has(linkIndex)) {\n        _grantResultMap.set(linkIndex, _grantResultMap.get(linkIndex).copy(bones[linkIndex].quaternion));\n      }\n    }\n  }\n  quaternion.copy(bone.quaternion);\n}\nclass AudioManager {\n  /**\n   * @param {THREE.Audio} audio\n   * @param {Object} params - (optional)\n   * @param {Nuumber} params.delayTime\n   */\n  constructor(audio, params = {}) {\n    this.audio = audio;\n    this.elapsedTime = 0;\n    this.currentTime = 0;\n    this.delayTime = params.delayTime !== void 0 ? params.delayTime : 0;\n    this.audioDuration = this.audio.buffer.duration;\n    this.duration = this.audioDuration + this.delayTime;\n  }\n  /**\n   * @param {Number} delta\n   * @return {AudioManager}\n   */\n  control(delta) {\n    this.elapsed += delta;\n    this.currentTime += delta;\n    if (this._shouldStopAudio())\n      this.audio.stop();\n    if (this._shouldStartAudio())\n      this.audio.play();\n    return this;\n  }\n  // private methods\n  _shouldStartAudio() {\n    if (this.audio.isPlaying)\n      return false;\n    while (this.currentTime >= this.duration) {\n      this.currentTime -= this.duration;\n    }\n    if (this.currentTime < this.delayTime)\n      return false;\n    if (this.currentTime - this.delayTime > this.audioDuration)\n      return false;\n    return true;\n  }\n  _shouldStopAudio() {\n    return this.audio.isPlaying && this.currentTime >= this.duration;\n  }\n}\nconst _q = /* @__PURE__ */ new Quaternion();\nclass GrantSolver {\n  constructor(mesh, grants = []) {\n    this.mesh = mesh;\n    this.grants = grants;\n  }\n  /**\n   * Solve all the grant bones\n   * @return {GrantSolver}\n   */\n  update() {\n    const grants = this.grants;\n    for (let i = 0, il = grants.length; i < il; i++) {\n      this.updateOne(grants[i]);\n    }\n    return this;\n  }\n  /**\n   * Solve a grant bone\n   * @param {Object} grant - grant parameter\n   * @return {GrantSolver}\n   */\n  updateOne(grant) {\n    const bones = this.mesh.skeleton.bones;\n    const bone = bones[grant.index];\n    const parentBone = bones[grant.parentIndex];\n    if (grant.isLocal) {\n      if (grant.affectPosition)\n        ;\n      if (grant.affectRotation)\n        ;\n    } else {\n      if (grant.affectPosition)\n        ;\n      if (grant.affectRotation) {\n        this.addGrantRotation(bone, parentBone.quaternion, grant.ratio);\n      }\n    }\n    return this;\n  }\n  addGrantRotation(bone, q, ratio) {\n    _q.set(0, 0, 0, 1);\n    _q.slerp(q, ratio);\n    bone.quaternion.multiply(_q);\n    return this;\n  }\n}\nexport {\n  MMDAnimationHelper\n};\n//# sourceMappingURL=MMDAnimationHelper.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}